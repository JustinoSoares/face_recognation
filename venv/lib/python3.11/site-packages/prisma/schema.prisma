generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Alunos {
  id             Int               @id @default(autoincrement())
  n_do_processo  Int
  nome_completo  String            @db.VarChar(255)
  classe         String            @db.VarChar(255)
  turno          enum_Alunos_turno @default(m)
  ano_letivo     String            @db.VarChar(255)
  turma          String            @db.VarChar(255)
  curso          String            @db.VarChar(255)
  createdAt      DateTime          @db.Timestamptz(6)
  updatedAt      DateTime          @db.Timestamptz(6)
  Alunos_propina Alunos_propina[]
  Fotos          Fotos[]
  Historico      Historico[]
  Reconhecimento Reconhecimento[]
}

model Alunos_propina {
  id        Int       @id @default(autoincrement())
  alunoId   Int?
  propinaId Int?
  valor     String    @db.VarChar(255)
  createdAt DateTime  @db.Timestamptz(6)
  updatedAt DateTime  @db.Timestamptz(6)
  Alunos    Alunos?   @relation(fields: [alunoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Propinas  Propinas? @relation(fields: [propinaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Fotos {
  id        Int      @id @default(autoincrement())
  descricao String?  @db.VarChar(255)
  url       String   @db.VarChar(255)
  alunoId   Int?
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  Alunos    Alunos?  @relation(fields: [alunoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Historico {
  id        Int                   @id @default(autoincrement())
  alunoId   Int?
  propinaId Int?
  status    enum_Historico_status
  timestamp DateTime              @db.Timestamptz(6)
  createdAt DateTime              @db.Timestamptz(6)
  updatedAt DateTime              @db.Timestamptz(6)
  Alunos    Alunos?               @relation(fields: [alunoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Propinas  Propinas?             @relation(fields: [propinaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Propinas {
  id             Int               @id @default(autoincrement())
  mes            enum_Propinas_mes
  ano_lectivo    String            @db.VarChar(255)
  createdAt      DateTime          @db.Timestamptz(6)
  updatedAt      DateTime          @db.Timestamptz(6)
  Alunos_propina Alunos_propina[]
  Historico      Historico[]
}

model Reconhecimento {
  id        Int      @id @default(autoincrement())
  alunoId   Int
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  Alunos    Alunos   @relation(fields: [alunoId], references: [id], onDelete: Cascade)
}

model SequelizeMeta {
  name String @id @db.VarChar(255)
}

model Users {
  id            Int              @id @default(autoincrement())
  nome_completo String?          @db.VarChar(255)
  email         String?          @db.VarChar(255)
  pin_acesso    String?          @db.VarChar(255)
  telefone      String?          @db.VarChar(255)
  type          enum_Users_type? @default(vigilante)
  bi            String?          @db.VarChar(255)
  createdAt     DateTime         @db.Timestamptz(6)
  updatedAt     DateTime         @db.Timestamptz(6)
  Vigilantes    Vigilantes[]
}

model Vigilantes {
  id        Int                   @id @default(autoincrement())
  turno     enum_Vigilantes_turno
  descricao String?               @db.VarChar(255)
  UserId    Int?
  createdAt DateTime              @db.Timestamptz(6)
  updatedAt DateTime              @db.Timestamptz(6)
  Users     Users?                @relation(fields: [UserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum enum_Alunos_turno {
  m
  t
  n
}

enum enum_Historico_status {
  Permitido
  Negado
}

enum enum_Propinas_mes {
  Janeiro
  Fevereiro
  Mar_o     @map("Março")
  Abril
  Maio
  Junho
  Julho
  Agosto
  Setembro
  Outubro
  Novembro
  Dezembro
}

enum enum_Users_type {
  admin
  vigilante
}

enum enum_Vigilantes_turno {
  m
  t
  n
  manh_ @map("manhã")
  tarde
  noite
}
