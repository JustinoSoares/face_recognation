# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _enum_Alunos_turnoListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.enum_Alunos_turno']]


class _enum_Alunos_turnoListFilterHasInput(TypedDict):
    has: 'enums.enum_Alunos_turno'


class _enum_Alunos_turnoListFilterHasEveryInput(TypedDict):
    has_every: List['enums.enum_Alunos_turno']


class _enum_Alunos_turnoListFilterHasSomeInput(TypedDict):
    has_some: List['enums.enum_Alunos_turno']


class _enum_Alunos_turnoListFilterIsEmptyInput(TypedDict):
    is_empty: bool


enum_Alunos_turnoListFilter = Union[
    _enum_Alunos_turnoListFilterHasInput,
    _enum_Alunos_turnoListFilterEqualsInput,
    _enum_Alunos_turnoListFilterHasSomeInput,
    _enum_Alunos_turnoListFilterIsEmptyInput,
    _enum_Alunos_turnoListFilterHasEveryInput,
]


class _enum_Alunos_turnoListUpdateSet(TypedDict):
    set: List['enums.enum_Alunos_turno']


class _enum_Alunos_turnoListUpdatePush(TypedDict):
    push: List['enums.enum_Alunos_turno']


enum_Alunos_turnoListUpdate = Union[
    List['enums.enum_Alunos_turno'],
    _enum_Alunos_turnoListUpdateSet,
    _enum_Alunos_turnoListUpdatePush,
]

class _enum_Historico_statusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.enum_Historico_status']]


class _enum_Historico_statusListFilterHasInput(TypedDict):
    has: 'enums.enum_Historico_status'


class _enum_Historico_statusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.enum_Historico_status']


class _enum_Historico_statusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.enum_Historico_status']


class _enum_Historico_statusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


enum_Historico_statusListFilter = Union[
    _enum_Historico_statusListFilterHasInput,
    _enum_Historico_statusListFilterEqualsInput,
    _enum_Historico_statusListFilterHasSomeInput,
    _enum_Historico_statusListFilterIsEmptyInput,
    _enum_Historico_statusListFilterHasEveryInput,
]


class _enum_Historico_statusListUpdateSet(TypedDict):
    set: List['enums.enum_Historico_status']


class _enum_Historico_statusListUpdatePush(TypedDict):
    push: List['enums.enum_Historico_status']


enum_Historico_statusListUpdate = Union[
    List['enums.enum_Historico_status'],
    _enum_Historico_statusListUpdateSet,
    _enum_Historico_statusListUpdatePush,
]

class _enum_Propinas_mesListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.enum_Propinas_mes']]


class _enum_Propinas_mesListFilterHasInput(TypedDict):
    has: 'enums.enum_Propinas_mes'


class _enum_Propinas_mesListFilterHasEveryInput(TypedDict):
    has_every: List['enums.enum_Propinas_mes']


class _enum_Propinas_mesListFilterHasSomeInput(TypedDict):
    has_some: List['enums.enum_Propinas_mes']


class _enum_Propinas_mesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


enum_Propinas_mesListFilter = Union[
    _enum_Propinas_mesListFilterHasInput,
    _enum_Propinas_mesListFilterEqualsInput,
    _enum_Propinas_mesListFilterHasSomeInput,
    _enum_Propinas_mesListFilterIsEmptyInput,
    _enum_Propinas_mesListFilterHasEveryInput,
]


class _enum_Propinas_mesListUpdateSet(TypedDict):
    set: List['enums.enum_Propinas_mes']


class _enum_Propinas_mesListUpdatePush(TypedDict):
    push: List['enums.enum_Propinas_mes']


enum_Propinas_mesListUpdate = Union[
    List['enums.enum_Propinas_mes'],
    _enum_Propinas_mesListUpdateSet,
    _enum_Propinas_mesListUpdatePush,
]

class _enum_Users_typeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.enum_Users_type']]


class _enum_Users_typeListFilterHasInput(TypedDict):
    has: 'enums.enum_Users_type'


class _enum_Users_typeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.enum_Users_type']


class _enum_Users_typeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.enum_Users_type']


class _enum_Users_typeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


enum_Users_typeListFilter = Union[
    _enum_Users_typeListFilterHasInput,
    _enum_Users_typeListFilterEqualsInput,
    _enum_Users_typeListFilterHasSomeInput,
    _enum_Users_typeListFilterIsEmptyInput,
    _enum_Users_typeListFilterHasEveryInput,
]


class _enum_Users_typeListUpdateSet(TypedDict):
    set: List['enums.enum_Users_type']


class _enum_Users_typeListUpdatePush(TypedDict):
    push: List['enums.enum_Users_type']


enum_Users_typeListUpdate = Union[
    List['enums.enum_Users_type'],
    _enum_Users_typeListUpdateSet,
    _enum_Users_typeListUpdatePush,
]

class _enum_Vigilantes_turnoListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.enum_Vigilantes_turno']]


class _enum_Vigilantes_turnoListFilterHasInput(TypedDict):
    has: 'enums.enum_Vigilantes_turno'


class _enum_Vigilantes_turnoListFilterHasEveryInput(TypedDict):
    has_every: List['enums.enum_Vigilantes_turno']


class _enum_Vigilantes_turnoListFilterHasSomeInput(TypedDict):
    has_some: List['enums.enum_Vigilantes_turno']


class _enum_Vigilantes_turnoListFilterIsEmptyInput(TypedDict):
    is_empty: bool


enum_Vigilantes_turnoListFilter = Union[
    _enum_Vigilantes_turnoListFilterHasInput,
    _enum_Vigilantes_turnoListFilterEqualsInput,
    _enum_Vigilantes_turnoListFilterHasSomeInput,
    _enum_Vigilantes_turnoListFilterIsEmptyInput,
    _enum_Vigilantes_turnoListFilterHasEveryInput,
]


class _enum_Vigilantes_turnoListUpdateSet(TypedDict):
    set: List['enums.enum_Vigilantes_turno']


class _enum_Vigilantes_turnoListUpdatePush(TypedDict):
    push: List['enums.enum_Vigilantes_turno']


enum_Vigilantes_turnoListUpdate = Union[
    List['enums.enum_Vigilantes_turno'],
    _enum_Vigilantes_turnoListUpdateSet,
    _enum_Vigilantes_turnoListUpdatePush,
]


# Alunos types

class AlunosOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Alunos create method"""
    id: _int
    turno: 'enums.enum_Alunos_turno'
    Alunos_propina: 'Alunos_propinaCreateManyNestedWithoutRelationsInput'
    Fotos: 'FotosCreateManyNestedWithoutRelationsInput'
    Historico: 'HistoricoCreateManyNestedWithoutRelationsInput'
    Reconhecimento: 'ReconhecimentoCreateManyNestedWithoutRelationsInput'


class AlunosCreateInput(AlunosOptionalCreateInput):
    """Required arguments to the Alunos create method"""
    n_do_processo: _int
    nome_completo: _str
    classe: _str
    ano_letivo: _str
    turma: _str
    curso: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AlunosOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Alunos create method, without relations"""
    id: _int
    turno: 'enums.enum_Alunos_turno'


class AlunosCreateWithoutRelationsInput(AlunosOptionalCreateWithoutRelationsInput):
    """Required arguments to the Alunos create method, without relations"""
    n_do_processo: _int
    nome_completo: _str
    classe: _str
    ano_letivo: _str
    turma: _str
    curso: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime

class AlunosConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'AlunosCreateWithoutRelationsInput'
    where: 'AlunosWhereUniqueInput'

class AlunosCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AlunosCreateWithoutRelationsInput'
    connect: 'AlunosWhereUniqueInput'
    connect_or_create: 'AlunosConnectOrCreateWithoutRelationsInput'


class AlunosCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AlunosCreateWithoutRelationsInput', List['AlunosCreateWithoutRelationsInput']]
    connect: Union['AlunosWhereUniqueInput', List['AlunosWhereUniqueInput']]
    connect_or_create: Union['AlunosConnectOrCreateWithoutRelationsInput', List['AlunosConnectOrCreateWithoutRelationsInput']]

_AlunosWhereUnique_id_Input = TypedDict(
    '_AlunosWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

AlunosWhereUniqueInput = _AlunosWhereUnique_id_Input


class AlunosUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    n_do_processo: Union[AtomicIntInput, _int]
    nome_completo: _str
    classe: _str
    turno: 'enums.enum_Alunos_turno'
    ano_letivo: _str
    turma: _str
    curso: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    Alunos_propina: 'Alunos_propinaUpdateManyWithoutRelationsInput'
    Fotos: 'FotosUpdateManyWithoutRelationsInput'
    Historico: 'HistoricoUpdateManyWithoutRelationsInput'
    Reconhecimento: 'ReconhecimentoUpdateManyWithoutRelationsInput'


class AlunosUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    n_do_processo: Union[AtomicIntInput, _int]
    nome_completo: _str
    classe: _str
    turno: 'enums.enum_Alunos_turno'
    ano_letivo: _str
    turma: _str
    curso: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class AlunosUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AlunosCreateWithoutRelationsInput']
    connect: List['AlunosWhereUniqueInput']
    connect_or_create: List['AlunosConnectOrCreateWithoutRelationsInput']
    set: List['AlunosWhereUniqueInput']
    disconnect: List['AlunosWhereUniqueInput']
    delete: List['AlunosWhereUniqueInput']

    # TODO
    # update: List['AlunosUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AlunosUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AlunosScalarWhereInput']
    # upsert: List['AlunosUpserteWithWhereUniqueWithoutRelationsInput']


class AlunosUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AlunosCreateWithoutRelationsInput'
    connect: 'AlunosWhereUniqueInput'
    connect_or_create: 'AlunosConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AlunosUpdateInput'
    # upsert: 'AlunosUpsertWithoutRelationsInput'


class AlunosUpsertInput(TypedDict):
    create: 'AlunosCreateInput'
    update: 'AlunosUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Alunos_id_OrderByInput = TypedDict(
    '_Alunos_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Alunos_n_do_processo_OrderByInput = TypedDict(
    '_Alunos_n_do_processo_OrderByInput',
    {
        'n_do_processo': 'SortOrder',
    },
    total=True
)

_Alunos_nome_completo_OrderByInput = TypedDict(
    '_Alunos_nome_completo_OrderByInput',
    {
        'nome_completo': 'SortOrder',
    },
    total=True
)

_Alunos_classe_OrderByInput = TypedDict(
    '_Alunos_classe_OrderByInput',
    {
        'classe': 'SortOrder',
    },
    total=True
)

_Alunos_turno_OrderByInput = TypedDict(
    '_Alunos_turno_OrderByInput',
    {
        'turno': 'SortOrder',
    },
    total=True
)

_Alunos_ano_letivo_OrderByInput = TypedDict(
    '_Alunos_ano_letivo_OrderByInput',
    {
        'ano_letivo': 'SortOrder',
    },
    total=True
)

_Alunos_turma_OrderByInput = TypedDict(
    '_Alunos_turma_OrderByInput',
    {
        'turma': 'SortOrder',
    },
    total=True
)

_Alunos_curso_OrderByInput = TypedDict(
    '_Alunos_curso_OrderByInput',
    {
        'curso': 'SortOrder',
    },
    total=True
)

_Alunos_createdAt_OrderByInput = TypedDict(
    '_Alunos_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Alunos_updatedAt_OrderByInput = TypedDict(
    '_Alunos_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Alunos_RelevanceInner = TypedDict(
    '_Alunos_RelevanceInner',
    {
        'fields': 'List[AlunosScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Alunos_RelevanceOrderByInput = TypedDict(
    '_Alunos_RelevanceOrderByInput',
    {
        '_relevance': '_Alunos_RelevanceInner',
    },
    total=True
)

AlunosOrderByInput = Union[
    '_Alunos_id_OrderByInput',
    '_Alunos_n_do_processo_OrderByInput',
    '_Alunos_nome_completo_OrderByInput',
    '_Alunos_classe_OrderByInput',
    '_Alunos_turno_OrderByInput',
    '_Alunos_ano_letivo_OrderByInput',
    '_Alunos_turma_OrderByInput',
    '_Alunos_curso_OrderByInput',
    '_Alunos_createdAt_OrderByInput',
    '_Alunos_updatedAt_OrderByInput',
    '_Alunos_RelevanceOrderByInput',
]



# recursive Alunos types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AlunosRelationFilter = TypedDict(
    'AlunosRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AlunosListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AlunosInclude(TypedDict, total=False):
    """Alunos relational arguments"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromAlunos']
    Fotos: Union[bool, 'FindManyFotosArgsFromAlunos']
    Historico: Union[bool, 'FindManyHistoricoArgsFromAlunos']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromAlunos']


    

class AlunosIncludeFromAlunos(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromAlunosRecursive1']
    Fotos: Union[bool, 'FindManyFotosArgsFromAlunosRecursive1']
    Historico: Union[bool, 'FindManyHistoricoArgsFromAlunosRecursive1']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromAlunosRecursive1']


class AlunosIncludeFromAlunosRecursive1(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromAlunosRecursive2']
    Fotos: Union[bool, 'FindManyFotosArgsFromAlunosRecursive2']
    Historico: Union[bool, 'FindManyHistoricoArgsFromAlunosRecursive2']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromAlunosRecursive2']


class AlunosIncludeFromAlunosRecursive2(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromAlunosRecursive3']
    Fotos: Union[bool, 'FindManyFotosArgsFromAlunosRecursive3']
    Historico: Union[bool, 'FindManyHistoricoArgsFromAlunosRecursive3']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromAlunosRecursive3']


class AlunosIncludeFromAlunosRecursive3(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromAlunosRecursive4']
    Fotos: Union[bool, 'FindManyFotosArgsFromAlunosRecursive4']
    Historico: Union[bool, 'FindManyHistoricoArgsFromAlunosRecursive4']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromAlunosRecursive4']


class AlunosIncludeFromAlunosRecursive4(TypedDict, total=False):
    """Relational arguments for Alunos"""

    

class AlunosArgsFromAlunos(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'AlunosIncludeFromAlunosRecursive1'


class AlunosArgsFromAlunosRecursive1(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'AlunosIncludeFromAlunosRecursive2'


class AlunosArgsFromAlunosRecursive2(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'AlunosIncludeFromAlunosRecursive3'


class AlunosArgsFromAlunosRecursive3(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'AlunosIncludeFromAlunosRecursive4'


class AlunosArgsFromAlunosRecursive4(TypedDict, total=False):
    """Arguments for Alunos"""
    
    

class FindManyAlunosArgsFromAlunos(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive1'


class FindManyAlunosArgsFromAlunosRecursive1(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive2'


class FindManyAlunosArgsFromAlunosRecursive2(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive3'


class FindManyAlunosArgsFromAlunosRecursive3(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive4'


class FindManyAlunosArgsFromAlunosRecursive4(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    
    

class Alunos_propinaIncludeFromAlunos(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos: Union[bool, 'AlunosArgsFromAlunosRecursive1']
    Propinas: Union[bool, 'PropinasArgsFromAlunosRecursive1']


class Alunos_propinaIncludeFromAlunosRecursive1(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos: Union[bool, 'AlunosArgsFromAlunosRecursive2']
    Propinas: Union[bool, 'PropinasArgsFromAlunosRecursive2']


class Alunos_propinaIncludeFromAlunosRecursive2(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos: Union[bool, 'AlunosArgsFromAlunosRecursive3']
    Propinas: Union[bool, 'PropinasArgsFromAlunosRecursive3']


class Alunos_propinaIncludeFromAlunosRecursive3(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos: Union[bool, 'AlunosArgsFromAlunosRecursive4']
    Propinas: Union[bool, 'PropinasArgsFromAlunosRecursive4']


class Alunos_propinaIncludeFromAlunosRecursive4(TypedDict, total=False):
    """Relational arguments for Alunos"""

    

class Alunos_propinaArgsFromAlunos(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive1'


class Alunos_propinaArgsFromAlunosRecursive1(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive2'


class Alunos_propinaArgsFromAlunosRecursive2(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive3'


class Alunos_propinaArgsFromAlunosRecursive3(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive4'


class Alunos_propinaArgsFromAlunosRecursive4(TypedDict, total=False):
    """Arguments for Alunos"""
    
    

class FindManyAlunos_propinaArgsFromAlunos(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive1'


class FindManyAlunos_propinaArgsFromAlunosRecursive1(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive2'


class FindManyAlunos_propinaArgsFromAlunosRecursive2(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive3'


class FindManyAlunos_propinaArgsFromAlunosRecursive3(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive4'


class FindManyAlunos_propinaArgsFromAlunosRecursive4(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    
    

class FotosIncludeFromAlunos(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos: Union[bool, 'AlunosArgsFromAlunosRecursive1']


class FotosIncludeFromAlunosRecursive1(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos: Union[bool, 'AlunosArgsFromAlunosRecursive2']


class FotosIncludeFromAlunosRecursive2(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos: Union[bool, 'AlunosArgsFromAlunosRecursive3']


class FotosIncludeFromAlunosRecursive3(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos: Union[bool, 'AlunosArgsFromAlunosRecursive4']


class FotosIncludeFromAlunosRecursive4(TypedDict, total=False):
    """Relational arguments for Alunos"""

    

class FotosArgsFromAlunos(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'FotosIncludeFromFotosRecursive1'


class FotosArgsFromAlunosRecursive1(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'FotosIncludeFromFotosRecursive2'


class FotosArgsFromAlunosRecursive2(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'FotosIncludeFromFotosRecursive3'


class FotosArgsFromAlunosRecursive3(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'FotosIncludeFromFotosRecursive4'


class FotosArgsFromAlunosRecursive4(TypedDict, total=False):
    """Arguments for Alunos"""
    
    

class FindManyFotosArgsFromAlunos(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive1'


class FindManyFotosArgsFromAlunosRecursive1(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive2'


class FindManyFotosArgsFromAlunosRecursive2(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive3'


class FindManyFotosArgsFromAlunosRecursive3(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive4'


class FindManyFotosArgsFromAlunosRecursive4(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    
    

class HistoricoIncludeFromAlunos(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos: Union[bool, 'AlunosArgsFromAlunosRecursive1']
    Propinas: Union[bool, 'PropinasArgsFromAlunosRecursive1']


class HistoricoIncludeFromAlunosRecursive1(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos: Union[bool, 'AlunosArgsFromAlunosRecursive2']
    Propinas: Union[bool, 'PropinasArgsFromAlunosRecursive2']


class HistoricoIncludeFromAlunosRecursive2(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos: Union[bool, 'AlunosArgsFromAlunosRecursive3']
    Propinas: Union[bool, 'PropinasArgsFromAlunosRecursive3']


class HistoricoIncludeFromAlunosRecursive3(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos: Union[bool, 'AlunosArgsFromAlunosRecursive4']
    Propinas: Union[bool, 'PropinasArgsFromAlunosRecursive4']


class HistoricoIncludeFromAlunosRecursive4(TypedDict, total=False):
    """Relational arguments for Alunos"""

    

class HistoricoArgsFromAlunos(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'HistoricoIncludeFromHistoricoRecursive1'


class HistoricoArgsFromAlunosRecursive1(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'HistoricoIncludeFromHistoricoRecursive2'


class HistoricoArgsFromAlunosRecursive2(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'HistoricoIncludeFromHistoricoRecursive3'


class HistoricoArgsFromAlunosRecursive3(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'HistoricoIncludeFromHistoricoRecursive4'


class HistoricoArgsFromAlunosRecursive4(TypedDict, total=False):
    """Arguments for Alunos"""
    
    

class FindManyHistoricoArgsFromAlunos(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive1'


class FindManyHistoricoArgsFromAlunosRecursive1(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive2'


class FindManyHistoricoArgsFromAlunosRecursive2(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive3'


class FindManyHistoricoArgsFromAlunosRecursive3(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive4'


class FindManyHistoricoArgsFromAlunosRecursive4(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    
    

class PropinasIncludeFromAlunos(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromAlunosRecursive1']
    Historico: Union[bool, 'FindManyHistoricoArgsFromAlunosRecursive1']


class PropinasIncludeFromAlunosRecursive1(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromAlunosRecursive2']
    Historico: Union[bool, 'FindManyHistoricoArgsFromAlunosRecursive2']


class PropinasIncludeFromAlunosRecursive2(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromAlunosRecursive3']
    Historico: Union[bool, 'FindManyHistoricoArgsFromAlunosRecursive3']


class PropinasIncludeFromAlunosRecursive3(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromAlunosRecursive4']
    Historico: Union[bool, 'FindManyHistoricoArgsFromAlunosRecursive4']


class PropinasIncludeFromAlunosRecursive4(TypedDict, total=False):
    """Relational arguments for Alunos"""

    

class PropinasArgsFromAlunos(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'PropinasIncludeFromPropinasRecursive1'


class PropinasArgsFromAlunosRecursive1(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'PropinasIncludeFromPropinasRecursive2'


class PropinasArgsFromAlunosRecursive2(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'PropinasIncludeFromPropinasRecursive3'


class PropinasArgsFromAlunosRecursive3(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'PropinasIncludeFromPropinasRecursive4'


class PropinasArgsFromAlunosRecursive4(TypedDict, total=False):
    """Arguments for Alunos"""
    
    

class FindManyPropinasArgsFromAlunos(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive1'


class FindManyPropinasArgsFromAlunosRecursive1(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive2'


class FindManyPropinasArgsFromAlunosRecursive2(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive3'


class FindManyPropinasArgsFromAlunosRecursive3(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive4'


class FindManyPropinasArgsFromAlunosRecursive4(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    
    

class ReconhecimentoIncludeFromAlunos(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos: Union[bool, 'AlunosArgsFromAlunosRecursive1']


class ReconhecimentoIncludeFromAlunosRecursive1(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos: Union[bool, 'AlunosArgsFromAlunosRecursive2']


class ReconhecimentoIncludeFromAlunosRecursive2(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos: Union[bool, 'AlunosArgsFromAlunosRecursive3']


class ReconhecimentoIncludeFromAlunosRecursive3(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Alunos: Union[bool, 'AlunosArgsFromAlunosRecursive4']


class ReconhecimentoIncludeFromAlunosRecursive4(TypedDict, total=False):
    """Relational arguments for Alunos"""

    

class ReconhecimentoArgsFromAlunos(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive1'


class ReconhecimentoArgsFromAlunosRecursive1(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive2'


class ReconhecimentoArgsFromAlunosRecursive2(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive3'


class ReconhecimentoArgsFromAlunosRecursive3(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive4'


class ReconhecimentoArgsFromAlunosRecursive4(TypedDict, total=False):
    """Arguments for Alunos"""
    
    

class FindManyReconhecimentoArgsFromAlunos(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive1'


class FindManyReconhecimentoArgsFromAlunosRecursive1(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive2'


class FindManyReconhecimentoArgsFromAlunosRecursive2(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive3'


class FindManyReconhecimentoArgsFromAlunosRecursive3(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive4'


class FindManyReconhecimentoArgsFromAlunosRecursive4(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    
    

class SequelizeMetaIncludeFromAlunos(TypedDict, total=False):
    """Relational arguments for Alunos"""


class SequelizeMetaIncludeFromAlunosRecursive1(TypedDict, total=False):
    """Relational arguments for Alunos"""


class SequelizeMetaIncludeFromAlunosRecursive2(TypedDict, total=False):
    """Relational arguments for Alunos"""


class SequelizeMetaIncludeFromAlunosRecursive3(TypedDict, total=False):
    """Relational arguments for Alunos"""


class SequelizeMetaIncludeFromAlunosRecursive4(TypedDict, total=False):
    """Relational arguments for Alunos"""

    

class SequelizeMetaArgsFromAlunos(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive1'


class SequelizeMetaArgsFromAlunosRecursive1(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive2'


class SequelizeMetaArgsFromAlunosRecursive2(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive3'


class SequelizeMetaArgsFromAlunosRecursive3(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive4'


class SequelizeMetaArgsFromAlunosRecursive4(TypedDict, total=False):
    """Arguments for Alunos"""
    
    

class FindManySequelizeMetaArgsFromAlunos(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive1'


class FindManySequelizeMetaArgsFromAlunosRecursive1(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive2'


class FindManySequelizeMetaArgsFromAlunosRecursive2(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive3'


class FindManySequelizeMetaArgsFromAlunosRecursive3(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive4'


class FindManySequelizeMetaArgsFromAlunosRecursive4(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    
    

class UsersIncludeFromAlunos(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromAlunosRecursive1']


class UsersIncludeFromAlunosRecursive1(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromAlunosRecursive2']


class UsersIncludeFromAlunosRecursive2(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromAlunosRecursive3']


class UsersIncludeFromAlunosRecursive3(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromAlunosRecursive4']


class UsersIncludeFromAlunosRecursive4(TypedDict, total=False):
    """Relational arguments for Alunos"""

    

class UsersArgsFromAlunos(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromAlunosRecursive1(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromAlunosRecursive2(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromAlunosRecursive3(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromAlunosRecursive4(TypedDict, total=False):
    """Arguments for Alunos"""
    
    

class FindManyUsersArgsFromAlunos(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromAlunosRecursive1(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromAlunosRecursive2(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromAlunosRecursive3(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromAlunosRecursive4(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class VigilantesIncludeFromAlunos(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Users: Union[bool, 'UsersArgsFromAlunosRecursive1']


class VigilantesIncludeFromAlunosRecursive1(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Users: Union[bool, 'UsersArgsFromAlunosRecursive2']


class VigilantesIncludeFromAlunosRecursive2(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Users: Union[bool, 'UsersArgsFromAlunosRecursive3']


class VigilantesIncludeFromAlunosRecursive3(TypedDict, total=False):
    """Relational arguments for Alunos"""
    Users: Union[bool, 'UsersArgsFromAlunosRecursive4']


class VigilantesIncludeFromAlunosRecursive4(TypedDict, total=False):
    """Relational arguments for Alunos"""

    

class VigilantesArgsFromAlunos(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'VigilantesIncludeFromVigilantesRecursive1'


class VigilantesArgsFromAlunosRecursive1(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'VigilantesIncludeFromVigilantesRecursive2'


class VigilantesArgsFromAlunosRecursive2(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'VigilantesIncludeFromVigilantesRecursive3'


class VigilantesArgsFromAlunosRecursive3(TypedDict, total=False):
    """Arguments for Alunos"""
    include: 'VigilantesIncludeFromVigilantesRecursive4'


class VigilantesArgsFromAlunosRecursive4(TypedDict, total=False):
    """Arguments for Alunos"""
    
    

class FindManyVigilantesArgsFromAlunos(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive1'


class FindManyVigilantesArgsFromAlunosRecursive1(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive2'


class FindManyVigilantesArgsFromAlunosRecursive2(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive3'


class FindManyVigilantesArgsFromAlunosRecursive3(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive4'


class FindManyVigilantesArgsFromAlunosRecursive4(TypedDict, total=False):
    """Arguments for Alunos"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    


FindManyAlunosArgs = FindManyAlunosArgsFromAlunos
FindFirstAlunosArgs = FindManyAlunosArgsFromAlunos


    

class AlunosWhereInput(TypedDict, total=False):
    """Alunos arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    n_do_processo: Union[_int, 'types.IntFilter']
    nome_completo: Union[_str, 'types.StringFilter']
    classe: Union[_str, 'types.StringFilter']
    turno: 'enums.enum_Alunos_turno'
    ano_letivo: Union[_str, 'types.StringFilter']
    turma: Union[_str, 'types.StringFilter']
    curso: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos_propina: 'Alunos_propinaListRelationFilter'
    Fotos: 'FotosListRelationFilter'
    Historico: 'HistoricoListRelationFilter'
    Reconhecimento: 'ReconhecimentoListRelationFilter'

    # should be noted that AND and NOT should be Union['AlunosWhereInputRecursive1', List['AlunosWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AlunosWhereInputRecursive1']
    OR: List['AlunosWhereInputRecursive1']
    NOT: List['AlunosWhereInputRecursive1']


class AlunosWhereInputRecursive1(TypedDict, total=False):
    """Alunos arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    n_do_processo: Union[_int, 'types.IntFilter']
    nome_completo: Union[_str, 'types.StringFilter']
    classe: Union[_str, 'types.StringFilter']
    turno: 'enums.enum_Alunos_turno'
    ano_letivo: Union[_str, 'types.StringFilter']
    turma: Union[_str, 'types.StringFilter']
    curso: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos_propina: 'Alunos_propinaListRelationFilter'
    Fotos: 'FotosListRelationFilter'
    Historico: 'HistoricoListRelationFilter'
    Reconhecimento: 'ReconhecimentoListRelationFilter'

    # should be noted that AND and NOT should be Union['AlunosWhereInputRecursive2', List['AlunosWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AlunosWhereInputRecursive2']
    OR: List['AlunosWhereInputRecursive2']
    NOT: List['AlunosWhereInputRecursive2']


class AlunosWhereInputRecursive2(TypedDict, total=False):
    """Alunos arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    n_do_processo: Union[_int, 'types.IntFilter']
    nome_completo: Union[_str, 'types.StringFilter']
    classe: Union[_str, 'types.StringFilter']
    turno: 'enums.enum_Alunos_turno'
    ano_letivo: Union[_str, 'types.StringFilter']
    turma: Union[_str, 'types.StringFilter']
    curso: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos_propina: 'Alunos_propinaListRelationFilter'
    Fotos: 'FotosListRelationFilter'
    Historico: 'HistoricoListRelationFilter'
    Reconhecimento: 'ReconhecimentoListRelationFilter'

    # should be noted that AND and NOT should be Union['AlunosWhereInputRecursive3', List['AlunosWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AlunosWhereInputRecursive3']
    OR: List['AlunosWhereInputRecursive3']
    NOT: List['AlunosWhereInputRecursive3']


class AlunosWhereInputRecursive3(TypedDict, total=False):
    """Alunos arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    n_do_processo: Union[_int, 'types.IntFilter']
    nome_completo: Union[_str, 'types.StringFilter']
    classe: Union[_str, 'types.StringFilter']
    turno: 'enums.enum_Alunos_turno'
    ano_letivo: Union[_str, 'types.StringFilter']
    turma: Union[_str, 'types.StringFilter']
    curso: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos_propina: 'Alunos_propinaListRelationFilter'
    Fotos: 'FotosListRelationFilter'
    Historico: 'HistoricoListRelationFilter'
    Reconhecimento: 'ReconhecimentoListRelationFilter'

    # should be noted that AND and NOT should be Union['AlunosWhereInputRecursive4', List['AlunosWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AlunosWhereInputRecursive4']
    OR: List['AlunosWhereInputRecursive4']
    NOT: List['AlunosWhereInputRecursive4']


class AlunosWhereInputRecursive4(TypedDict, total=False):
    """Alunos arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    n_do_processo: Union[_int, 'types.IntFilter']
    nome_completo: Union[_str, 'types.StringFilter']
    classe: Union[_str, 'types.StringFilter']
    turno: 'enums.enum_Alunos_turno'
    ano_letivo: Union[_str, 'types.StringFilter']
    turma: Union[_str, 'types.StringFilter']
    curso: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos_propina: 'Alunos_propinaListRelationFilter'
    Fotos: 'FotosListRelationFilter'
    Historico: 'HistoricoListRelationFilter'
    Reconhecimento: 'ReconhecimentoListRelationFilter'



# aggregate Alunos types


    

class AlunosScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Alunos arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    n_do_processo: Union[_int, 'types.IntWithAggregatesFilter']
    nome_completo: Union[_str, 'types.StringWithAggregatesFilter']
    classe: Union[_str, 'types.StringWithAggregatesFilter']
    turno: 'enums.enum_Alunos_turno'
    ano_letivo: Union[_str, 'types.StringWithAggregatesFilter']
    turma: Union[_str, 'types.StringWithAggregatesFilter']
    curso: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AlunosScalarWhereWithAggregatesInputRecursive1']
    OR: List['AlunosScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AlunosScalarWhereWithAggregatesInputRecursive1']


class AlunosScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Alunos arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    n_do_processo: Union[_int, 'types.IntWithAggregatesFilter']
    nome_completo: Union[_str, 'types.StringWithAggregatesFilter']
    classe: Union[_str, 'types.StringWithAggregatesFilter']
    turno: 'enums.enum_Alunos_turno'
    ano_letivo: Union[_str, 'types.StringWithAggregatesFilter']
    turma: Union[_str, 'types.StringWithAggregatesFilter']
    curso: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AlunosScalarWhereWithAggregatesInputRecursive2']
    OR: List['AlunosScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AlunosScalarWhereWithAggregatesInputRecursive2']


class AlunosScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Alunos arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    n_do_processo: Union[_int, 'types.IntWithAggregatesFilter']
    nome_completo: Union[_str, 'types.StringWithAggregatesFilter']
    classe: Union[_str, 'types.StringWithAggregatesFilter']
    turno: 'enums.enum_Alunos_turno'
    ano_letivo: Union[_str, 'types.StringWithAggregatesFilter']
    turma: Union[_str, 'types.StringWithAggregatesFilter']
    curso: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AlunosScalarWhereWithAggregatesInputRecursive3']
    OR: List['AlunosScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AlunosScalarWhereWithAggregatesInputRecursive3']


class AlunosScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Alunos arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    n_do_processo: Union[_int, 'types.IntWithAggregatesFilter']
    nome_completo: Union[_str, 'types.StringWithAggregatesFilter']
    classe: Union[_str, 'types.StringWithAggregatesFilter']
    turno: 'enums.enum_Alunos_turno'
    ano_letivo: Union[_str, 'types.StringWithAggregatesFilter']
    turma: Union[_str, 'types.StringWithAggregatesFilter']
    curso: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AlunosScalarWhereWithAggregatesInputRecursive4']
    OR: List['AlunosScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AlunosScalarWhereWithAggregatesInputRecursive4']


class AlunosScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Alunos arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    n_do_processo: Union[_int, 'types.IntWithAggregatesFilter']
    nome_completo: Union[_str, 'types.StringWithAggregatesFilter']
    classe: Union[_str, 'types.StringWithAggregatesFilter']
    turno: 'enums.enum_Alunos_turno'
    ano_letivo: Union[_str, 'types.StringWithAggregatesFilter']
    turma: Union[_str, 'types.StringWithAggregatesFilter']
    curso: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class AlunosGroupByOutput(TypedDict, total=False):
    id: _int
    n_do_processo: _int
    nome_completo: _str
    classe: _str
    turno: 'enums.enum_Alunos_turno'
    ano_letivo: _str
    turma: _str
    curso: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'AlunosSumAggregateOutput'
    _avg: 'AlunosAvgAggregateOutput'
    _min: 'AlunosMinAggregateOutput'
    _max: 'AlunosMaxAggregateOutput'
    _count: 'AlunosCountAggregateOutput'


class AlunosAvgAggregateOutput(TypedDict, total=False):
    """Alunos output for aggregating averages"""
    id: float
    n_do_processo: float


class AlunosSumAggregateOutput(TypedDict, total=False):
    """Alunos output for aggregating sums"""
    id: _int
    n_do_processo: _int


class AlunosScalarAggregateOutput(TypedDict, total=False):
    """Alunos output including scalar fields"""
    id: _int
    n_do_processo: _int
    nome_completo: _str
    classe: _str
    turno: 'enums.enum_Alunos_turno'
    ano_letivo: _str
    turma: _str
    curso: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


AlunosMinAggregateOutput = AlunosScalarAggregateOutput
AlunosMaxAggregateOutput = AlunosScalarAggregateOutput


class AlunosMaxAggregateInput(TypedDict, total=False):
    """Alunos input for aggregating by max"""
    id: bool
    n_do_processo: bool
    nome_completo: bool
    classe: bool
    turno: bool
    ano_letivo: bool
    turma: bool
    curso: bool
    createdAt: bool
    updatedAt: bool


class AlunosMinAggregateInput(TypedDict, total=False):
    """Alunos input for aggregating by min"""
    id: bool
    n_do_processo: bool
    nome_completo: bool
    classe: bool
    turno: bool
    ano_letivo: bool
    turma: bool
    curso: bool
    createdAt: bool
    updatedAt: bool


class AlunosNumberAggregateInput(TypedDict, total=False):
    """Alunos input for aggregating numbers"""
    id: bool
    n_do_processo: bool


AlunosAvgAggregateInput = AlunosNumberAggregateInput
AlunosSumAggregateInput = AlunosNumberAggregateInput


AlunosCountAggregateInput = TypedDict(
    'AlunosCountAggregateInput',
    {
        'id': bool,
        'n_do_processo': bool,
        'nome_completo': bool,
        'classe': bool,
        'turno': bool,
        'ano_letivo': bool,
        'turma': bool,
        'curso': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

AlunosCountAggregateOutput = TypedDict(
    'AlunosCountAggregateOutput',
    {
        'id': int,
        'n_do_processo': int,
        'nome_completo': int,
        'classe': int,
        'turno': int,
        'ano_letivo': int,
        'turma': int,
        'curso': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


AlunosKeys = Literal[
    'id',
    'n_do_processo',
    'nome_completo',
    'classe',
    'turno',
    'ano_letivo',
    'turma',
    'curso',
    'createdAt',
    'updatedAt',
    'Alunos_propina',
    'Fotos',
    'Historico',
    'Reconhecimento',
]
AlunosScalarFieldKeys = Literal[
    'id',
    'n_do_processo',
    'nome_completo',
    'classe',
    'turno',
    'ano_letivo',
    'turma',
    'curso',
    'createdAt',
    'updatedAt',
]
AlunosScalarFieldKeysT = TypeVar('AlunosScalarFieldKeysT', bound=AlunosScalarFieldKeys)

AlunosRelationalFieldKeys = Literal[
        'Alunos_propina',
        'Fotos',
        'Historico',
        'Reconhecimento',
    ]

# Alunos_propina types

class Alunos_propinaOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Alunos_propina create method"""
    id: _int
    alunoId: Optional[_int]
    propinaId: Optional[_int]
    Alunos: 'AlunosCreateNestedWithoutRelationsInput'
    Propinas: 'PropinasCreateNestedWithoutRelationsInput'


class Alunos_propinaCreateInput(Alunos_propinaOptionalCreateInput):
    """Required arguments to the Alunos_propina create method"""
    valor: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class Alunos_propinaOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Alunos_propina create method, without relations"""
    id: _int
    alunoId: Optional[_int]
    propinaId: Optional[_int]


class Alunos_propinaCreateWithoutRelationsInput(Alunos_propinaOptionalCreateWithoutRelationsInput):
    """Required arguments to the Alunos_propina create method, without relations"""
    valor: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime

class Alunos_propinaConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'Alunos_propinaCreateWithoutRelationsInput'
    where: 'Alunos_propinaWhereUniqueInput'

class Alunos_propinaCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'Alunos_propinaCreateWithoutRelationsInput'
    connect: 'Alunos_propinaWhereUniqueInput'
    connect_or_create: 'Alunos_propinaConnectOrCreateWithoutRelationsInput'


class Alunos_propinaCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['Alunos_propinaCreateWithoutRelationsInput', List['Alunos_propinaCreateWithoutRelationsInput']]
    connect: Union['Alunos_propinaWhereUniqueInput', List['Alunos_propinaWhereUniqueInput']]
    connect_or_create: Union['Alunos_propinaConnectOrCreateWithoutRelationsInput', List['Alunos_propinaConnectOrCreateWithoutRelationsInput']]

_Alunos_propinaWhereUnique_id_Input = TypedDict(
    '_Alunos_propinaWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

Alunos_propinaWhereUniqueInput = _Alunos_propinaWhereUnique_id_Input


class Alunos_propinaUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    valor: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    Alunos: 'AlunosUpdateOneWithoutRelationsInput'
    Propinas: 'PropinasUpdateOneWithoutRelationsInput'


class Alunos_propinaUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    valor: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class Alunos_propinaUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['Alunos_propinaCreateWithoutRelationsInput']
    connect: List['Alunos_propinaWhereUniqueInput']
    connect_or_create: List['Alunos_propinaConnectOrCreateWithoutRelationsInput']
    set: List['Alunos_propinaWhereUniqueInput']
    disconnect: List['Alunos_propinaWhereUniqueInput']
    delete: List['Alunos_propinaWhereUniqueInput']

    # TODO
    # update: List['Alunos_propinaUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['Alunos_propinaUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['Alunos_propinaScalarWhereInput']
    # upsert: List['Alunos_propinaUpserteWithWhereUniqueWithoutRelationsInput']


class Alunos_propinaUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'Alunos_propinaCreateWithoutRelationsInput'
    connect: 'Alunos_propinaWhereUniqueInput'
    connect_or_create: 'Alunos_propinaConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'Alunos_propinaUpdateInput'
    # upsert: 'Alunos_propinaUpsertWithoutRelationsInput'


class Alunos_propinaUpsertInput(TypedDict):
    create: 'Alunos_propinaCreateInput'
    update: 'Alunos_propinaUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Alunos_propina_id_OrderByInput = TypedDict(
    '_Alunos_propina_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Alunos_propina_alunoId_OrderByInput = TypedDict(
    '_Alunos_propina_alunoId_OrderByInput',
    {
        'alunoId': 'SortOrder',
    },
    total=True
)

_Alunos_propina_propinaId_OrderByInput = TypedDict(
    '_Alunos_propina_propinaId_OrderByInput',
    {
        'propinaId': 'SortOrder',
    },
    total=True
)

_Alunos_propina_valor_OrderByInput = TypedDict(
    '_Alunos_propina_valor_OrderByInput',
    {
        'valor': 'SortOrder',
    },
    total=True
)

_Alunos_propina_createdAt_OrderByInput = TypedDict(
    '_Alunos_propina_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Alunos_propina_updatedAt_OrderByInput = TypedDict(
    '_Alunos_propina_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Alunos_propina_RelevanceInner = TypedDict(
    '_Alunos_propina_RelevanceInner',
    {
        'fields': 'List[Alunos_propinaScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Alunos_propina_RelevanceOrderByInput = TypedDict(
    '_Alunos_propina_RelevanceOrderByInput',
    {
        '_relevance': '_Alunos_propina_RelevanceInner',
    },
    total=True
)

Alunos_propinaOrderByInput = Union[
    '_Alunos_propina_id_OrderByInput',
    '_Alunos_propina_alunoId_OrderByInput',
    '_Alunos_propina_propinaId_OrderByInput',
    '_Alunos_propina_valor_OrderByInput',
    '_Alunos_propina_createdAt_OrderByInput',
    '_Alunos_propina_updatedAt_OrderByInput',
    '_Alunos_propina_RelevanceOrderByInput',
]



# recursive Alunos_propina types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

Alunos_propinaRelationFilter = TypedDict(
    'Alunos_propinaRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class Alunos_propinaListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class Alunos_propinaInclude(TypedDict, total=False):
    """Alunos_propina relational arguments"""
    Alunos: Union[bool, 'AlunosArgsFromAlunos_propina']
    Propinas: Union[bool, 'PropinasArgsFromAlunos_propina']


    

class AlunosIncludeFromAlunos_propina(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromAlunos_propinaRecursive1']
    Fotos: Union[bool, 'FindManyFotosArgsFromAlunos_propinaRecursive1']
    Historico: Union[bool, 'FindManyHistoricoArgsFromAlunos_propinaRecursive1']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromAlunos_propinaRecursive1']


class AlunosIncludeFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromAlunos_propinaRecursive2']
    Fotos: Union[bool, 'FindManyFotosArgsFromAlunos_propinaRecursive2']
    Historico: Union[bool, 'FindManyHistoricoArgsFromAlunos_propinaRecursive2']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromAlunos_propinaRecursive2']


class AlunosIncludeFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromAlunos_propinaRecursive3']
    Fotos: Union[bool, 'FindManyFotosArgsFromAlunos_propinaRecursive3']
    Historico: Union[bool, 'FindManyHistoricoArgsFromAlunos_propinaRecursive3']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromAlunos_propinaRecursive3']


class AlunosIncludeFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromAlunos_propinaRecursive4']
    Fotos: Union[bool, 'FindManyFotosArgsFromAlunos_propinaRecursive4']
    Historico: Union[bool, 'FindManyHistoricoArgsFromAlunos_propinaRecursive4']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromAlunos_propinaRecursive4']


class AlunosIncludeFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""

    

class AlunosArgsFromAlunos_propina(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'AlunosIncludeFromAlunosRecursive1'


class AlunosArgsFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'AlunosIncludeFromAlunosRecursive2'


class AlunosArgsFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'AlunosIncludeFromAlunosRecursive3'


class AlunosArgsFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'AlunosIncludeFromAlunosRecursive4'


class AlunosArgsFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    
    

class FindManyAlunosArgsFromAlunos_propina(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive1'


class FindManyAlunosArgsFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive2'


class FindManyAlunosArgsFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive3'


class FindManyAlunosArgsFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive4'


class FindManyAlunosArgsFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    
    

class Alunos_propinaIncludeFromAlunos_propina(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos: Union[bool, 'AlunosArgsFromAlunos_propinaRecursive1']
    Propinas: Union[bool, 'PropinasArgsFromAlunos_propinaRecursive1']


class Alunos_propinaIncludeFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos: Union[bool, 'AlunosArgsFromAlunos_propinaRecursive2']
    Propinas: Union[bool, 'PropinasArgsFromAlunos_propinaRecursive2']


class Alunos_propinaIncludeFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos: Union[bool, 'AlunosArgsFromAlunos_propinaRecursive3']
    Propinas: Union[bool, 'PropinasArgsFromAlunos_propinaRecursive3']


class Alunos_propinaIncludeFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos: Union[bool, 'AlunosArgsFromAlunos_propinaRecursive4']
    Propinas: Union[bool, 'PropinasArgsFromAlunos_propinaRecursive4']


class Alunos_propinaIncludeFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""

    

class Alunos_propinaArgsFromAlunos_propina(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive1'


class Alunos_propinaArgsFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive2'


class Alunos_propinaArgsFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive3'


class Alunos_propinaArgsFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive4'


class Alunos_propinaArgsFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    
    

class FindManyAlunos_propinaArgsFromAlunos_propina(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive1'


class FindManyAlunos_propinaArgsFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive2'


class FindManyAlunos_propinaArgsFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive3'


class FindManyAlunos_propinaArgsFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive4'


class FindManyAlunos_propinaArgsFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    
    

class FotosIncludeFromAlunos_propina(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos: Union[bool, 'AlunosArgsFromAlunos_propinaRecursive1']


class FotosIncludeFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos: Union[bool, 'AlunosArgsFromAlunos_propinaRecursive2']


class FotosIncludeFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos: Union[bool, 'AlunosArgsFromAlunos_propinaRecursive3']


class FotosIncludeFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos: Union[bool, 'AlunosArgsFromAlunos_propinaRecursive4']


class FotosIncludeFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""

    

class FotosArgsFromAlunos_propina(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'FotosIncludeFromFotosRecursive1'


class FotosArgsFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'FotosIncludeFromFotosRecursive2'


class FotosArgsFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'FotosIncludeFromFotosRecursive3'


class FotosArgsFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'FotosIncludeFromFotosRecursive4'


class FotosArgsFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    
    

class FindManyFotosArgsFromAlunos_propina(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive1'


class FindManyFotosArgsFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive2'


class FindManyFotosArgsFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive3'


class FindManyFotosArgsFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive4'


class FindManyFotosArgsFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    
    

class HistoricoIncludeFromAlunos_propina(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos: Union[bool, 'AlunosArgsFromAlunos_propinaRecursive1']
    Propinas: Union[bool, 'PropinasArgsFromAlunos_propinaRecursive1']


class HistoricoIncludeFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos: Union[bool, 'AlunosArgsFromAlunos_propinaRecursive2']
    Propinas: Union[bool, 'PropinasArgsFromAlunos_propinaRecursive2']


class HistoricoIncludeFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos: Union[bool, 'AlunosArgsFromAlunos_propinaRecursive3']
    Propinas: Union[bool, 'PropinasArgsFromAlunos_propinaRecursive3']


class HistoricoIncludeFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos: Union[bool, 'AlunosArgsFromAlunos_propinaRecursive4']
    Propinas: Union[bool, 'PropinasArgsFromAlunos_propinaRecursive4']


class HistoricoIncludeFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""

    

class HistoricoArgsFromAlunos_propina(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'HistoricoIncludeFromHistoricoRecursive1'


class HistoricoArgsFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'HistoricoIncludeFromHistoricoRecursive2'


class HistoricoArgsFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'HistoricoIncludeFromHistoricoRecursive3'


class HistoricoArgsFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'HistoricoIncludeFromHistoricoRecursive4'


class HistoricoArgsFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    
    

class FindManyHistoricoArgsFromAlunos_propina(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive1'


class FindManyHistoricoArgsFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive2'


class FindManyHistoricoArgsFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive3'


class FindManyHistoricoArgsFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive4'


class FindManyHistoricoArgsFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    
    

class PropinasIncludeFromAlunos_propina(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromAlunos_propinaRecursive1']
    Historico: Union[bool, 'FindManyHistoricoArgsFromAlunos_propinaRecursive1']


class PropinasIncludeFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromAlunos_propinaRecursive2']
    Historico: Union[bool, 'FindManyHistoricoArgsFromAlunos_propinaRecursive2']


class PropinasIncludeFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromAlunos_propinaRecursive3']
    Historico: Union[bool, 'FindManyHistoricoArgsFromAlunos_propinaRecursive3']


class PropinasIncludeFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromAlunos_propinaRecursive4']
    Historico: Union[bool, 'FindManyHistoricoArgsFromAlunos_propinaRecursive4']


class PropinasIncludeFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""

    

class PropinasArgsFromAlunos_propina(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'PropinasIncludeFromPropinasRecursive1'


class PropinasArgsFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'PropinasIncludeFromPropinasRecursive2'


class PropinasArgsFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'PropinasIncludeFromPropinasRecursive3'


class PropinasArgsFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'PropinasIncludeFromPropinasRecursive4'


class PropinasArgsFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    
    

class FindManyPropinasArgsFromAlunos_propina(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive1'


class FindManyPropinasArgsFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive2'


class FindManyPropinasArgsFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive3'


class FindManyPropinasArgsFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive4'


class FindManyPropinasArgsFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    
    

class ReconhecimentoIncludeFromAlunos_propina(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos: Union[bool, 'AlunosArgsFromAlunos_propinaRecursive1']


class ReconhecimentoIncludeFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos: Union[bool, 'AlunosArgsFromAlunos_propinaRecursive2']


class ReconhecimentoIncludeFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos: Union[bool, 'AlunosArgsFromAlunos_propinaRecursive3']


class ReconhecimentoIncludeFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Alunos: Union[bool, 'AlunosArgsFromAlunos_propinaRecursive4']


class ReconhecimentoIncludeFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""

    

class ReconhecimentoArgsFromAlunos_propina(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive1'


class ReconhecimentoArgsFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive2'


class ReconhecimentoArgsFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive3'


class ReconhecimentoArgsFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive4'


class ReconhecimentoArgsFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    
    

class FindManyReconhecimentoArgsFromAlunos_propina(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive1'


class FindManyReconhecimentoArgsFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive2'


class FindManyReconhecimentoArgsFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive3'


class FindManyReconhecimentoArgsFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive4'


class FindManyReconhecimentoArgsFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    
    

class SequelizeMetaIncludeFromAlunos_propina(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""


class SequelizeMetaIncludeFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""


class SequelizeMetaIncludeFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""


class SequelizeMetaIncludeFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""


class SequelizeMetaIncludeFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""

    

class SequelizeMetaArgsFromAlunos_propina(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive1'


class SequelizeMetaArgsFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive2'


class SequelizeMetaArgsFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive3'


class SequelizeMetaArgsFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive4'


class SequelizeMetaArgsFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    
    

class FindManySequelizeMetaArgsFromAlunos_propina(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive1'


class FindManySequelizeMetaArgsFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive2'


class FindManySequelizeMetaArgsFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive3'


class FindManySequelizeMetaArgsFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive4'


class FindManySequelizeMetaArgsFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    
    

class UsersIncludeFromAlunos_propina(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromAlunos_propinaRecursive1']


class UsersIncludeFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromAlunos_propinaRecursive2']


class UsersIncludeFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromAlunos_propinaRecursive3']


class UsersIncludeFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromAlunos_propinaRecursive4']


class UsersIncludeFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""

    

class UsersArgsFromAlunos_propina(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    
    

class FindManyUsersArgsFromAlunos_propina(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class VigilantesIncludeFromAlunos_propina(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Users: Union[bool, 'UsersArgsFromAlunos_propinaRecursive1']


class VigilantesIncludeFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Users: Union[bool, 'UsersArgsFromAlunos_propinaRecursive2']


class VigilantesIncludeFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Users: Union[bool, 'UsersArgsFromAlunos_propinaRecursive3']


class VigilantesIncludeFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""
    Users: Union[bool, 'UsersArgsFromAlunos_propinaRecursive4']


class VigilantesIncludeFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Relational arguments for Alunos_propina"""

    

class VigilantesArgsFromAlunos_propina(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'VigilantesIncludeFromVigilantesRecursive1'


class VigilantesArgsFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'VigilantesIncludeFromVigilantesRecursive2'


class VigilantesArgsFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'VigilantesIncludeFromVigilantesRecursive3'


class VigilantesArgsFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    include: 'VigilantesIncludeFromVigilantesRecursive4'


class VigilantesArgsFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    
    

class FindManyVigilantesArgsFromAlunos_propina(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive1'


class FindManyVigilantesArgsFromAlunos_propinaRecursive1(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive2'


class FindManyVigilantesArgsFromAlunos_propinaRecursive2(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive3'


class FindManyVigilantesArgsFromAlunos_propinaRecursive3(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive4'


class FindManyVigilantesArgsFromAlunos_propinaRecursive4(TypedDict, total=False):
    """Arguments for Alunos_propina"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    


FindManyAlunos_propinaArgs = FindManyAlunos_propinaArgsFromAlunos_propina
FindFirstAlunos_propinaArgs = FindManyAlunos_propinaArgsFromAlunos_propina


    

class Alunos_propinaWhereInput(TypedDict, total=False):
    """Alunos_propina arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    alunoId: Union[None, _int, 'types.IntFilter']
    propinaId: Union[None, _int, 'types.IntFilter']
    valor: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos: 'AlunosRelationFilter'
    Propinas: 'PropinasRelationFilter'

    # should be noted that AND and NOT should be Union['Alunos_propinaWhereInputRecursive1', List['Alunos_propinaWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['Alunos_propinaWhereInputRecursive1']
    OR: List['Alunos_propinaWhereInputRecursive1']
    NOT: List['Alunos_propinaWhereInputRecursive1']


class Alunos_propinaWhereInputRecursive1(TypedDict, total=False):
    """Alunos_propina arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    alunoId: Union[None, _int, 'types.IntFilter']
    propinaId: Union[None, _int, 'types.IntFilter']
    valor: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos: 'AlunosRelationFilter'
    Propinas: 'PropinasRelationFilter'

    # should be noted that AND and NOT should be Union['Alunos_propinaWhereInputRecursive2', List['Alunos_propinaWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['Alunos_propinaWhereInputRecursive2']
    OR: List['Alunos_propinaWhereInputRecursive2']
    NOT: List['Alunos_propinaWhereInputRecursive2']


class Alunos_propinaWhereInputRecursive2(TypedDict, total=False):
    """Alunos_propina arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    alunoId: Union[None, _int, 'types.IntFilter']
    propinaId: Union[None, _int, 'types.IntFilter']
    valor: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos: 'AlunosRelationFilter'
    Propinas: 'PropinasRelationFilter'

    # should be noted that AND and NOT should be Union['Alunos_propinaWhereInputRecursive3', List['Alunos_propinaWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['Alunos_propinaWhereInputRecursive3']
    OR: List['Alunos_propinaWhereInputRecursive3']
    NOT: List['Alunos_propinaWhereInputRecursive3']


class Alunos_propinaWhereInputRecursive3(TypedDict, total=False):
    """Alunos_propina arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    alunoId: Union[None, _int, 'types.IntFilter']
    propinaId: Union[None, _int, 'types.IntFilter']
    valor: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos: 'AlunosRelationFilter'
    Propinas: 'PropinasRelationFilter'

    # should be noted that AND and NOT should be Union['Alunos_propinaWhereInputRecursive4', List['Alunos_propinaWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['Alunos_propinaWhereInputRecursive4']
    OR: List['Alunos_propinaWhereInputRecursive4']
    NOT: List['Alunos_propinaWhereInputRecursive4']


class Alunos_propinaWhereInputRecursive4(TypedDict, total=False):
    """Alunos_propina arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    alunoId: Union[None, _int, 'types.IntFilter']
    propinaId: Union[None, _int, 'types.IntFilter']
    valor: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos: 'AlunosRelationFilter'
    Propinas: 'PropinasRelationFilter'



# aggregate Alunos_propina types


    

class Alunos_propinaScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Alunos_propina arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    alunoId: Union[_int, 'types.IntWithAggregatesFilter']
    propinaId: Union[_int, 'types.IntWithAggregatesFilter']
    valor: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['Alunos_propinaScalarWhereWithAggregatesInputRecursive1']
    OR: List['Alunos_propinaScalarWhereWithAggregatesInputRecursive1']
    NOT: List['Alunos_propinaScalarWhereWithAggregatesInputRecursive1']


class Alunos_propinaScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Alunos_propina arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    alunoId: Union[_int, 'types.IntWithAggregatesFilter']
    propinaId: Union[_int, 'types.IntWithAggregatesFilter']
    valor: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['Alunos_propinaScalarWhereWithAggregatesInputRecursive2']
    OR: List['Alunos_propinaScalarWhereWithAggregatesInputRecursive2']
    NOT: List['Alunos_propinaScalarWhereWithAggregatesInputRecursive2']


class Alunos_propinaScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Alunos_propina arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    alunoId: Union[_int, 'types.IntWithAggregatesFilter']
    propinaId: Union[_int, 'types.IntWithAggregatesFilter']
    valor: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['Alunos_propinaScalarWhereWithAggregatesInputRecursive3']
    OR: List['Alunos_propinaScalarWhereWithAggregatesInputRecursive3']
    NOT: List['Alunos_propinaScalarWhereWithAggregatesInputRecursive3']


class Alunos_propinaScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Alunos_propina arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    alunoId: Union[_int, 'types.IntWithAggregatesFilter']
    propinaId: Union[_int, 'types.IntWithAggregatesFilter']
    valor: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['Alunos_propinaScalarWhereWithAggregatesInputRecursive4']
    OR: List['Alunos_propinaScalarWhereWithAggregatesInputRecursive4']
    NOT: List['Alunos_propinaScalarWhereWithAggregatesInputRecursive4']


class Alunos_propinaScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Alunos_propina arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    alunoId: Union[_int, 'types.IntWithAggregatesFilter']
    propinaId: Union[_int, 'types.IntWithAggregatesFilter']
    valor: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class Alunos_propinaGroupByOutput(TypedDict, total=False):
    id: _int
    alunoId: _int
    propinaId: _int
    valor: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'Alunos_propinaSumAggregateOutput'
    _avg: 'Alunos_propinaAvgAggregateOutput'
    _min: 'Alunos_propinaMinAggregateOutput'
    _max: 'Alunos_propinaMaxAggregateOutput'
    _count: 'Alunos_propinaCountAggregateOutput'


class Alunos_propinaAvgAggregateOutput(TypedDict, total=False):
    """Alunos_propina output for aggregating averages"""
    id: float
    alunoId: float
    propinaId: float


class Alunos_propinaSumAggregateOutput(TypedDict, total=False):
    """Alunos_propina output for aggregating sums"""
    id: _int
    alunoId: _int
    propinaId: _int


class Alunos_propinaScalarAggregateOutput(TypedDict, total=False):
    """Alunos_propina output including scalar fields"""
    id: _int
    alunoId: _int
    propinaId: _int
    valor: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


Alunos_propinaMinAggregateOutput = Alunos_propinaScalarAggregateOutput
Alunos_propinaMaxAggregateOutput = Alunos_propinaScalarAggregateOutput


class Alunos_propinaMaxAggregateInput(TypedDict, total=False):
    """Alunos_propina input for aggregating by max"""
    id: bool
    alunoId: bool
    propinaId: bool
    valor: bool
    createdAt: bool
    updatedAt: bool


class Alunos_propinaMinAggregateInput(TypedDict, total=False):
    """Alunos_propina input for aggregating by min"""
    id: bool
    alunoId: bool
    propinaId: bool
    valor: bool
    createdAt: bool
    updatedAt: bool


class Alunos_propinaNumberAggregateInput(TypedDict, total=False):
    """Alunos_propina input for aggregating numbers"""
    id: bool
    alunoId: bool
    propinaId: bool


Alunos_propinaAvgAggregateInput = Alunos_propinaNumberAggregateInput
Alunos_propinaSumAggregateInput = Alunos_propinaNumberAggregateInput


Alunos_propinaCountAggregateInput = TypedDict(
    'Alunos_propinaCountAggregateInput',
    {
        'id': bool,
        'alunoId': bool,
        'propinaId': bool,
        'valor': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

Alunos_propinaCountAggregateOutput = TypedDict(
    'Alunos_propinaCountAggregateOutput',
    {
        'id': int,
        'alunoId': int,
        'propinaId': int,
        'valor': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


Alunos_propinaKeys = Literal[
    'id',
    'alunoId',
    'propinaId',
    'valor',
    'createdAt',
    'updatedAt',
    'Alunos',
    'Propinas',
]
Alunos_propinaScalarFieldKeys = Literal[
    'id',
    'alunoId',
    'propinaId',
    'valor',
    'createdAt',
    'updatedAt',
]
Alunos_propinaScalarFieldKeysT = TypeVar('Alunos_propinaScalarFieldKeysT', bound=Alunos_propinaScalarFieldKeys)

Alunos_propinaRelationalFieldKeys = Literal[
        'Alunos',
        'Propinas',
    ]

# Fotos types

class FotosOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Fotos create method"""
    id: _int
    descricao: Optional[_str]
    alunoId: Optional[_int]
    Alunos: 'AlunosCreateNestedWithoutRelationsInput'


class FotosCreateInput(FotosOptionalCreateInput):
    """Required arguments to the Fotos create method"""
    url: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class FotosOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Fotos create method, without relations"""
    id: _int
    descricao: Optional[_str]
    alunoId: Optional[_int]


class FotosCreateWithoutRelationsInput(FotosOptionalCreateWithoutRelationsInput):
    """Required arguments to the Fotos create method, without relations"""
    url: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime

class FotosConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'FotosCreateWithoutRelationsInput'
    where: 'FotosWhereUniqueInput'

class FotosCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'FotosCreateWithoutRelationsInput'
    connect: 'FotosWhereUniqueInput'
    connect_or_create: 'FotosConnectOrCreateWithoutRelationsInput'


class FotosCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['FotosCreateWithoutRelationsInput', List['FotosCreateWithoutRelationsInput']]
    connect: Union['FotosWhereUniqueInput', List['FotosWhereUniqueInput']]
    connect_or_create: Union['FotosConnectOrCreateWithoutRelationsInput', List['FotosConnectOrCreateWithoutRelationsInput']]

_FotosWhereUnique_id_Input = TypedDict(
    '_FotosWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

FotosWhereUniqueInput = _FotosWhereUnique_id_Input


class FotosUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    descricao: Optional[_str]
    url: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    Alunos: 'AlunosUpdateOneWithoutRelationsInput'


class FotosUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    descricao: Optional[_str]
    url: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class FotosUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['FotosCreateWithoutRelationsInput']
    connect: List['FotosWhereUniqueInput']
    connect_or_create: List['FotosConnectOrCreateWithoutRelationsInput']
    set: List['FotosWhereUniqueInput']
    disconnect: List['FotosWhereUniqueInput']
    delete: List['FotosWhereUniqueInput']

    # TODO
    # update: List['FotosUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['FotosUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['FotosScalarWhereInput']
    # upsert: List['FotosUpserteWithWhereUniqueWithoutRelationsInput']


class FotosUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'FotosCreateWithoutRelationsInput'
    connect: 'FotosWhereUniqueInput'
    connect_or_create: 'FotosConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'FotosUpdateInput'
    # upsert: 'FotosUpsertWithoutRelationsInput'


class FotosUpsertInput(TypedDict):
    create: 'FotosCreateInput'
    update: 'FotosUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Fotos_id_OrderByInput = TypedDict(
    '_Fotos_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Fotos_descricao_OrderByInput = TypedDict(
    '_Fotos_descricao_OrderByInput',
    {
        'descricao': 'SortOrder',
    },
    total=True
)

_Fotos_url_OrderByInput = TypedDict(
    '_Fotos_url_OrderByInput',
    {
        'url': 'SortOrder',
    },
    total=True
)

_Fotos_alunoId_OrderByInput = TypedDict(
    '_Fotos_alunoId_OrderByInput',
    {
        'alunoId': 'SortOrder',
    },
    total=True
)

_Fotos_createdAt_OrderByInput = TypedDict(
    '_Fotos_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Fotos_updatedAt_OrderByInput = TypedDict(
    '_Fotos_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Fotos_RelevanceInner = TypedDict(
    '_Fotos_RelevanceInner',
    {
        'fields': 'List[FotosScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Fotos_RelevanceOrderByInput = TypedDict(
    '_Fotos_RelevanceOrderByInput',
    {
        '_relevance': '_Fotos_RelevanceInner',
    },
    total=True
)

FotosOrderByInput = Union[
    '_Fotos_id_OrderByInput',
    '_Fotos_descricao_OrderByInput',
    '_Fotos_url_OrderByInput',
    '_Fotos_alunoId_OrderByInput',
    '_Fotos_createdAt_OrderByInput',
    '_Fotos_updatedAt_OrderByInput',
    '_Fotos_RelevanceOrderByInput',
]



# recursive Fotos types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

FotosRelationFilter = TypedDict(
    'FotosRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class FotosListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class FotosInclude(TypedDict, total=False):
    """Fotos relational arguments"""
    Alunos: Union[bool, 'AlunosArgsFromFotos']


    

class AlunosIncludeFromFotos(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromFotosRecursive1']
    Fotos: Union[bool, 'FindManyFotosArgsFromFotosRecursive1']
    Historico: Union[bool, 'FindManyHistoricoArgsFromFotosRecursive1']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromFotosRecursive1']


class AlunosIncludeFromFotosRecursive1(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromFotosRecursive2']
    Fotos: Union[bool, 'FindManyFotosArgsFromFotosRecursive2']
    Historico: Union[bool, 'FindManyHistoricoArgsFromFotosRecursive2']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromFotosRecursive2']


class AlunosIncludeFromFotosRecursive2(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromFotosRecursive3']
    Fotos: Union[bool, 'FindManyFotosArgsFromFotosRecursive3']
    Historico: Union[bool, 'FindManyHistoricoArgsFromFotosRecursive3']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromFotosRecursive3']


class AlunosIncludeFromFotosRecursive3(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromFotosRecursive4']
    Fotos: Union[bool, 'FindManyFotosArgsFromFotosRecursive4']
    Historico: Union[bool, 'FindManyHistoricoArgsFromFotosRecursive4']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromFotosRecursive4']


class AlunosIncludeFromFotosRecursive4(TypedDict, total=False):
    """Relational arguments for Fotos"""

    

class AlunosArgsFromFotos(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'AlunosIncludeFromAlunosRecursive1'


class AlunosArgsFromFotosRecursive1(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'AlunosIncludeFromAlunosRecursive2'


class AlunosArgsFromFotosRecursive2(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'AlunosIncludeFromAlunosRecursive3'


class AlunosArgsFromFotosRecursive3(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'AlunosIncludeFromAlunosRecursive4'


class AlunosArgsFromFotosRecursive4(TypedDict, total=False):
    """Arguments for Fotos"""
    
    

class FindManyAlunosArgsFromFotos(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive1'


class FindManyAlunosArgsFromFotosRecursive1(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive2'


class FindManyAlunosArgsFromFotosRecursive2(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive3'


class FindManyAlunosArgsFromFotosRecursive3(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive4'


class FindManyAlunosArgsFromFotosRecursive4(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    
    

class Alunos_propinaIncludeFromFotos(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos: Union[bool, 'AlunosArgsFromFotosRecursive1']
    Propinas: Union[bool, 'PropinasArgsFromFotosRecursive1']


class Alunos_propinaIncludeFromFotosRecursive1(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos: Union[bool, 'AlunosArgsFromFotosRecursive2']
    Propinas: Union[bool, 'PropinasArgsFromFotosRecursive2']


class Alunos_propinaIncludeFromFotosRecursive2(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos: Union[bool, 'AlunosArgsFromFotosRecursive3']
    Propinas: Union[bool, 'PropinasArgsFromFotosRecursive3']


class Alunos_propinaIncludeFromFotosRecursive3(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos: Union[bool, 'AlunosArgsFromFotosRecursive4']
    Propinas: Union[bool, 'PropinasArgsFromFotosRecursive4']


class Alunos_propinaIncludeFromFotosRecursive4(TypedDict, total=False):
    """Relational arguments for Fotos"""

    

class Alunos_propinaArgsFromFotos(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive1'


class Alunos_propinaArgsFromFotosRecursive1(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive2'


class Alunos_propinaArgsFromFotosRecursive2(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive3'


class Alunos_propinaArgsFromFotosRecursive3(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive4'


class Alunos_propinaArgsFromFotosRecursive4(TypedDict, total=False):
    """Arguments for Fotos"""
    
    

class FindManyAlunos_propinaArgsFromFotos(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive1'


class FindManyAlunos_propinaArgsFromFotosRecursive1(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive2'


class FindManyAlunos_propinaArgsFromFotosRecursive2(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive3'


class FindManyAlunos_propinaArgsFromFotosRecursive3(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive4'


class FindManyAlunos_propinaArgsFromFotosRecursive4(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    
    

class FotosIncludeFromFotos(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos: Union[bool, 'AlunosArgsFromFotosRecursive1']


class FotosIncludeFromFotosRecursive1(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos: Union[bool, 'AlunosArgsFromFotosRecursive2']


class FotosIncludeFromFotosRecursive2(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos: Union[bool, 'AlunosArgsFromFotosRecursive3']


class FotosIncludeFromFotosRecursive3(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos: Union[bool, 'AlunosArgsFromFotosRecursive4']


class FotosIncludeFromFotosRecursive4(TypedDict, total=False):
    """Relational arguments for Fotos"""

    

class FotosArgsFromFotos(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'FotosIncludeFromFotosRecursive1'


class FotosArgsFromFotosRecursive1(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'FotosIncludeFromFotosRecursive2'


class FotosArgsFromFotosRecursive2(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'FotosIncludeFromFotosRecursive3'


class FotosArgsFromFotosRecursive3(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'FotosIncludeFromFotosRecursive4'


class FotosArgsFromFotosRecursive4(TypedDict, total=False):
    """Arguments for Fotos"""
    
    

class FindManyFotosArgsFromFotos(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive1'


class FindManyFotosArgsFromFotosRecursive1(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive2'


class FindManyFotosArgsFromFotosRecursive2(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive3'


class FindManyFotosArgsFromFotosRecursive3(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive4'


class FindManyFotosArgsFromFotosRecursive4(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    
    

class HistoricoIncludeFromFotos(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos: Union[bool, 'AlunosArgsFromFotosRecursive1']
    Propinas: Union[bool, 'PropinasArgsFromFotosRecursive1']


class HistoricoIncludeFromFotosRecursive1(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos: Union[bool, 'AlunosArgsFromFotosRecursive2']
    Propinas: Union[bool, 'PropinasArgsFromFotosRecursive2']


class HistoricoIncludeFromFotosRecursive2(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos: Union[bool, 'AlunosArgsFromFotosRecursive3']
    Propinas: Union[bool, 'PropinasArgsFromFotosRecursive3']


class HistoricoIncludeFromFotosRecursive3(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos: Union[bool, 'AlunosArgsFromFotosRecursive4']
    Propinas: Union[bool, 'PropinasArgsFromFotosRecursive4']


class HistoricoIncludeFromFotosRecursive4(TypedDict, total=False):
    """Relational arguments for Fotos"""

    

class HistoricoArgsFromFotos(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'HistoricoIncludeFromHistoricoRecursive1'


class HistoricoArgsFromFotosRecursive1(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'HistoricoIncludeFromHistoricoRecursive2'


class HistoricoArgsFromFotosRecursive2(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'HistoricoIncludeFromHistoricoRecursive3'


class HistoricoArgsFromFotosRecursive3(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'HistoricoIncludeFromHistoricoRecursive4'


class HistoricoArgsFromFotosRecursive4(TypedDict, total=False):
    """Arguments for Fotos"""
    
    

class FindManyHistoricoArgsFromFotos(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive1'


class FindManyHistoricoArgsFromFotosRecursive1(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive2'


class FindManyHistoricoArgsFromFotosRecursive2(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive3'


class FindManyHistoricoArgsFromFotosRecursive3(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive4'


class FindManyHistoricoArgsFromFotosRecursive4(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    
    

class PropinasIncludeFromFotos(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromFotosRecursive1']
    Historico: Union[bool, 'FindManyHistoricoArgsFromFotosRecursive1']


class PropinasIncludeFromFotosRecursive1(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromFotosRecursive2']
    Historico: Union[bool, 'FindManyHistoricoArgsFromFotosRecursive2']


class PropinasIncludeFromFotosRecursive2(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromFotosRecursive3']
    Historico: Union[bool, 'FindManyHistoricoArgsFromFotosRecursive3']


class PropinasIncludeFromFotosRecursive3(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromFotosRecursive4']
    Historico: Union[bool, 'FindManyHistoricoArgsFromFotosRecursive4']


class PropinasIncludeFromFotosRecursive4(TypedDict, total=False):
    """Relational arguments for Fotos"""

    

class PropinasArgsFromFotos(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'PropinasIncludeFromPropinasRecursive1'


class PropinasArgsFromFotosRecursive1(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'PropinasIncludeFromPropinasRecursive2'


class PropinasArgsFromFotosRecursive2(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'PropinasIncludeFromPropinasRecursive3'


class PropinasArgsFromFotosRecursive3(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'PropinasIncludeFromPropinasRecursive4'


class PropinasArgsFromFotosRecursive4(TypedDict, total=False):
    """Arguments for Fotos"""
    
    

class FindManyPropinasArgsFromFotos(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive1'


class FindManyPropinasArgsFromFotosRecursive1(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive2'


class FindManyPropinasArgsFromFotosRecursive2(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive3'


class FindManyPropinasArgsFromFotosRecursive3(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive4'


class FindManyPropinasArgsFromFotosRecursive4(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    
    

class ReconhecimentoIncludeFromFotos(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos: Union[bool, 'AlunosArgsFromFotosRecursive1']


class ReconhecimentoIncludeFromFotosRecursive1(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos: Union[bool, 'AlunosArgsFromFotosRecursive2']


class ReconhecimentoIncludeFromFotosRecursive2(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos: Union[bool, 'AlunosArgsFromFotosRecursive3']


class ReconhecimentoIncludeFromFotosRecursive3(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Alunos: Union[bool, 'AlunosArgsFromFotosRecursive4']


class ReconhecimentoIncludeFromFotosRecursive4(TypedDict, total=False):
    """Relational arguments for Fotos"""

    

class ReconhecimentoArgsFromFotos(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive1'


class ReconhecimentoArgsFromFotosRecursive1(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive2'


class ReconhecimentoArgsFromFotosRecursive2(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive3'


class ReconhecimentoArgsFromFotosRecursive3(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive4'


class ReconhecimentoArgsFromFotosRecursive4(TypedDict, total=False):
    """Arguments for Fotos"""
    
    

class FindManyReconhecimentoArgsFromFotos(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive1'


class FindManyReconhecimentoArgsFromFotosRecursive1(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive2'


class FindManyReconhecimentoArgsFromFotosRecursive2(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive3'


class FindManyReconhecimentoArgsFromFotosRecursive3(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive4'


class FindManyReconhecimentoArgsFromFotosRecursive4(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    
    

class SequelizeMetaIncludeFromFotos(TypedDict, total=False):
    """Relational arguments for Fotos"""


class SequelizeMetaIncludeFromFotosRecursive1(TypedDict, total=False):
    """Relational arguments for Fotos"""


class SequelizeMetaIncludeFromFotosRecursive2(TypedDict, total=False):
    """Relational arguments for Fotos"""


class SequelizeMetaIncludeFromFotosRecursive3(TypedDict, total=False):
    """Relational arguments for Fotos"""


class SequelizeMetaIncludeFromFotosRecursive4(TypedDict, total=False):
    """Relational arguments for Fotos"""

    

class SequelizeMetaArgsFromFotos(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive1'


class SequelizeMetaArgsFromFotosRecursive1(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive2'


class SequelizeMetaArgsFromFotosRecursive2(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive3'


class SequelizeMetaArgsFromFotosRecursive3(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive4'


class SequelizeMetaArgsFromFotosRecursive4(TypedDict, total=False):
    """Arguments for Fotos"""
    
    

class FindManySequelizeMetaArgsFromFotos(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive1'


class FindManySequelizeMetaArgsFromFotosRecursive1(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive2'


class FindManySequelizeMetaArgsFromFotosRecursive2(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive3'


class FindManySequelizeMetaArgsFromFotosRecursive3(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive4'


class FindManySequelizeMetaArgsFromFotosRecursive4(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    
    

class UsersIncludeFromFotos(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromFotosRecursive1']


class UsersIncludeFromFotosRecursive1(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromFotosRecursive2']


class UsersIncludeFromFotosRecursive2(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromFotosRecursive3']


class UsersIncludeFromFotosRecursive3(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromFotosRecursive4']


class UsersIncludeFromFotosRecursive4(TypedDict, total=False):
    """Relational arguments for Fotos"""

    

class UsersArgsFromFotos(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromFotosRecursive1(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromFotosRecursive2(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromFotosRecursive3(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromFotosRecursive4(TypedDict, total=False):
    """Arguments for Fotos"""
    
    

class FindManyUsersArgsFromFotos(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromFotosRecursive1(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromFotosRecursive2(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromFotosRecursive3(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromFotosRecursive4(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class VigilantesIncludeFromFotos(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Users: Union[bool, 'UsersArgsFromFotosRecursive1']


class VigilantesIncludeFromFotosRecursive1(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Users: Union[bool, 'UsersArgsFromFotosRecursive2']


class VigilantesIncludeFromFotosRecursive2(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Users: Union[bool, 'UsersArgsFromFotosRecursive3']


class VigilantesIncludeFromFotosRecursive3(TypedDict, total=False):
    """Relational arguments for Fotos"""
    Users: Union[bool, 'UsersArgsFromFotosRecursive4']


class VigilantesIncludeFromFotosRecursive4(TypedDict, total=False):
    """Relational arguments for Fotos"""

    

class VigilantesArgsFromFotos(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'VigilantesIncludeFromVigilantesRecursive1'


class VigilantesArgsFromFotosRecursive1(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'VigilantesIncludeFromVigilantesRecursive2'


class VigilantesArgsFromFotosRecursive2(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'VigilantesIncludeFromVigilantesRecursive3'


class VigilantesArgsFromFotosRecursive3(TypedDict, total=False):
    """Arguments for Fotos"""
    include: 'VigilantesIncludeFromVigilantesRecursive4'


class VigilantesArgsFromFotosRecursive4(TypedDict, total=False):
    """Arguments for Fotos"""
    
    

class FindManyVigilantesArgsFromFotos(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive1'


class FindManyVigilantesArgsFromFotosRecursive1(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive2'


class FindManyVigilantesArgsFromFotosRecursive2(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive3'


class FindManyVigilantesArgsFromFotosRecursive3(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive4'


class FindManyVigilantesArgsFromFotosRecursive4(TypedDict, total=False):
    """Arguments for Fotos"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    


FindManyFotosArgs = FindManyFotosArgsFromFotos
FindFirstFotosArgs = FindManyFotosArgsFromFotos


    

class FotosWhereInput(TypedDict, total=False):
    """Fotos arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    descricao: Union[None, _str, 'types.StringFilter']
    url: Union[_str, 'types.StringFilter']
    alunoId: Union[None, _int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos: 'AlunosRelationFilter'

    # should be noted that AND and NOT should be Union['FotosWhereInputRecursive1', List['FotosWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['FotosWhereInputRecursive1']
    OR: List['FotosWhereInputRecursive1']
    NOT: List['FotosWhereInputRecursive1']


class FotosWhereInputRecursive1(TypedDict, total=False):
    """Fotos arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    descricao: Union[None, _str, 'types.StringFilter']
    url: Union[_str, 'types.StringFilter']
    alunoId: Union[None, _int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos: 'AlunosRelationFilter'

    # should be noted that AND and NOT should be Union['FotosWhereInputRecursive2', List['FotosWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['FotosWhereInputRecursive2']
    OR: List['FotosWhereInputRecursive2']
    NOT: List['FotosWhereInputRecursive2']


class FotosWhereInputRecursive2(TypedDict, total=False):
    """Fotos arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    descricao: Union[None, _str, 'types.StringFilter']
    url: Union[_str, 'types.StringFilter']
    alunoId: Union[None, _int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos: 'AlunosRelationFilter'

    # should be noted that AND and NOT should be Union['FotosWhereInputRecursive3', List['FotosWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['FotosWhereInputRecursive3']
    OR: List['FotosWhereInputRecursive3']
    NOT: List['FotosWhereInputRecursive3']


class FotosWhereInputRecursive3(TypedDict, total=False):
    """Fotos arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    descricao: Union[None, _str, 'types.StringFilter']
    url: Union[_str, 'types.StringFilter']
    alunoId: Union[None, _int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos: 'AlunosRelationFilter'

    # should be noted that AND and NOT should be Union['FotosWhereInputRecursive4', List['FotosWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['FotosWhereInputRecursive4']
    OR: List['FotosWhereInputRecursive4']
    NOT: List['FotosWhereInputRecursive4']


class FotosWhereInputRecursive4(TypedDict, total=False):
    """Fotos arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    descricao: Union[None, _str, 'types.StringFilter']
    url: Union[_str, 'types.StringFilter']
    alunoId: Union[None, _int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos: 'AlunosRelationFilter'



# aggregate Fotos types


    

class FotosScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Fotos arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    descricao: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    alunoId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['FotosScalarWhereWithAggregatesInputRecursive1']
    OR: List['FotosScalarWhereWithAggregatesInputRecursive1']
    NOT: List['FotosScalarWhereWithAggregatesInputRecursive1']


class FotosScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Fotos arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    descricao: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    alunoId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['FotosScalarWhereWithAggregatesInputRecursive2']
    OR: List['FotosScalarWhereWithAggregatesInputRecursive2']
    NOT: List['FotosScalarWhereWithAggregatesInputRecursive2']


class FotosScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Fotos arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    descricao: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    alunoId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['FotosScalarWhereWithAggregatesInputRecursive3']
    OR: List['FotosScalarWhereWithAggregatesInputRecursive3']
    NOT: List['FotosScalarWhereWithAggregatesInputRecursive3']


class FotosScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Fotos arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    descricao: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    alunoId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['FotosScalarWhereWithAggregatesInputRecursive4']
    OR: List['FotosScalarWhereWithAggregatesInputRecursive4']
    NOT: List['FotosScalarWhereWithAggregatesInputRecursive4']


class FotosScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Fotos arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    descricao: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    alunoId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class FotosGroupByOutput(TypedDict, total=False):
    id: _int
    descricao: _str
    url: _str
    alunoId: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'FotosSumAggregateOutput'
    _avg: 'FotosAvgAggregateOutput'
    _min: 'FotosMinAggregateOutput'
    _max: 'FotosMaxAggregateOutput'
    _count: 'FotosCountAggregateOutput'


class FotosAvgAggregateOutput(TypedDict, total=False):
    """Fotos output for aggregating averages"""
    id: float
    alunoId: float


class FotosSumAggregateOutput(TypedDict, total=False):
    """Fotos output for aggregating sums"""
    id: _int
    alunoId: _int


class FotosScalarAggregateOutput(TypedDict, total=False):
    """Fotos output including scalar fields"""
    id: _int
    descricao: _str
    url: _str
    alunoId: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


FotosMinAggregateOutput = FotosScalarAggregateOutput
FotosMaxAggregateOutput = FotosScalarAggregateOutput


class FotosMaxAggregateInput(TypedDict, total=False):
    """Fotos input for aggregating by max"""
    id: bool
    descricao: bool
    url: bool
    alunoId: bool
    createdAt: bool
    updatedAt: bool


class FotosMinAggregateInput(TypedDict, total=False):
    """Fotos input for aggregating by min"""
    id: bool
    descricao: bool
    url: bool
    alunoId: bool
    createdAt: bool
    updatedAt: bool


class FotosNumberAggregateInput(TypedDict, total=False):
    """Fotos input for aggregating numbers"""
    id: bool
    alunoId: bool


FotosAvgAggregateInput = FotosNumberAggregateInput
FotosSumAggregateInput = FotosNumberAggregateInput


FotosCountAggregateInput = TypedDict(
    'FotosCountAggregateInput',
    {
        'id': bool,
        'descricao': bool,
        'url': bool,
        'alunoId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

FotosCountAggregateOutput = TypedDict(
    'FotosCountAggregateOutput',
    {
        'id': int,
        'descricao': int,
        'url': int,
        'alunoId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


FotosKeys = Literal[
    'id',
    'descricao',
    'url',
    'alunoId',
    'createdAt',
    'updatedAt',
    'Alunos',
]
FotosScalarFieldKeys = Literal[
    'id',
    'descricao',
    'url',
    'alunoId',
    'createdAt',
    'updatedAt',
]
FotosScalarFieldKeysT = TypeVar('FotosScalarFieldKeysT', bound=FotosScalarFieldKeys)

FotosRelationalFieldKeys = Literal[
        'Alunos',
    ]

# Historico types

class HistoricoOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Historico create method"""
    id: _int
    alunoId: Optional[_int]
    propinaId: Optional[_int]
    Alunos: 'AlunosCreateNestedWithoutRelationsInput'
    Propinas: 'PropinasCreateNestedWithoutRelationsInput'


class HistoricoCreateInput(HistoricoOptionalCreateInput):
    """Required arguments to the Historico create method"""
    status: 'enums.enum_Historico_status'
    timestamp: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class HistoricoOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Historico create method, without relations"""
    id: _int
    alunoId: Optional[_int]
    propinaId: Optional[_int]


class HistoricoCreateWithoutRelationsInput(HistoricoOptionalCreateWithoutRelationsInput):
    """Required arguments to the Historico create method, without relations"""
    status: 'enums.enum_Historico_status'
    timestamp: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime

class HistoricoConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'HistoricoCreateWithoutRelationsInput'
    where: 'HistoricoWhereUniqueInput'

class HistoricoCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'HistoricoCreateWithoutRelationsInput'
    connect: 'HistoricoWhereUniqueInput'
    connect_or_create: 'HistoricoConnectOrCreateWithoutRelationsInput'


class HistoricoCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['HistoricoCreateWithoutRelationsInput', List['HistoricoCreateWithoutRelationsInput']]
    connect: Union['HistoricoWhereUniqueInput', List['HistoricoWhereUniqueInput']]
    connect_or_create: Union['HistoricoConnectOrCreateWithoutRelationsInput', List['HistoricoConnectOrCreateWithoutRelationsInput']]

_HistoricoWhereUnique_id_Input = TypedDict(
    '_HistoricoWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

HistoricoWhereUniqueInput = _HistoricoWhereUnique_id_Input


class HistoricoUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    status: 'enums.enum_Historico_status'
    timestamp: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    Alunos: 'AlunosUpdateOneWithoutRelationsInput'
    Propinas: 'PropinasUpdateOneWithoutRelationsInput'


class HistoricoUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    status: 'enums.enum_Historico_status'
    timestamp: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class HistoricoUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['HistoricoCreateWithoutRelationsInput']
    connect: List['HistoricoWhereUniqueInput']
    connect_or_create: List['HistoricoConnectOrCreateWithoutRelationsInput']
    set: List['HistoricoWhereUniqueInput']
    disconnect: List['HistoricoWhereUniqueInput']
    delete: List['HistoricoWhereUniqueInput']

    # TODO
    # update: List['HistoricoUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['HistoricoUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['HistoricoScalarWhereInput']
    # upsert: List['HistoricoUpserteWithWhereUniqueWithoutRelationsInput']


class HistoricoUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'HistoricoCreateWithoutRelationsInput'
    connect: 'HistoricoWhereUniqueInput'
    connect_or_create: 'HistoricoConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'HistoricoUpdateInput'
    # upsert: 'HistoricoUpsertWithoutRelationsInput'


class HistoricoUpsertInput(TypedDict):
    create: 'HistoricoCreateInput'
    update: 'HistoricoUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Historico_id_OrderByInput = TypedDict(
    '_Historico_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Historico_alunoId_OrderByInput = TypedDict(
    '_Historico_alunoId_OrderByInput',
    {
        'alunoId': 'SortOrder',
    },
    total=True
)

_Historico_propinaId_OrderByInput = TypedDict(
    '_Historico_propinaId_OrderByInput',
    {
        'propinaId': 'SortOrder',
    },
    total=True
)

_Historico_status_OrderByInput = TypedDict(
    '_Historico_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_Historico_timestamp_OrderByInput = TypedDict(
    '_Historico_timestamp_OrderByInput',
    {
        'timestamp': 'SortOrder',
    },
    total=True
)

_Historico_createdAt_OrderByInput = TypedDict(
    '_Historico_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Historico_updatedAt_OrderByInput = TypedDict(
    '_Historico_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Historico_RelevanceInner = TypedDict(
    '_Historico_RelevanceInner',
    {
        'fields': 'List[HistoricoScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Historico_RelevanceOrderByInput = TypedDict(
    '_Historico_RelevanceOrderByInput',
    {
        '_relevance': '_Historico_RelevanceInner',
    },
    total=True
)

HistoricoOrderByInput = Union[
    '_Historico_id_OrderByInput',
    '_Historico_alunoId_OrderByInput',
    '_Historico_propinaId_OrderByInput',
    '_Historico_status_OrderByInput',
    '_Historico_timestamp_OrderByInput',
    '_Historico_createdAt_OrderByInput',
    '_Historico_updatedAt_OrderByInput',
    '_Historico_RelevanceOrderByInput',
]



# recursive Historico types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

HistoricoRelationFilter = TypedDict(
    'HistoricoRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class HistoricoListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class HistoricoInclude(TypedDict, total=False):
    """Historico relational arguments"""
    Alunos: Union[bool, 'AlunosArgsFromHistorico']
    Propinas: Union[bool, 'PropinasArgsFromHistorico']


    

class AlunosIncludeFromHistorico(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromHistoricoRecursive1']
    Fotos: Union[bool, 'FindManyFotosArgsFromHistoricoRecursive1']
    Historico: Union[bool, 'FindManyHistoricoArgsFromHistoricoRecursive1']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromHistoricoRecursive1']


class AlunosIncludeFromHistoricoRecursive1(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromHistoricoRecursive2']
    Fotos: Union[bool, 'FindManyFotosArgsFromHistoricoRecursive2']
    Historico: Union[bool, 'FindManyHistoricoArgsFromHistoricoRecursive2']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromHistoricoRecursive2']


class AlunosIncludeFromHistoricoRecursive2(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromHistoricoRecursive3']
    Fotos: Union[bool, 'FindManyFotosArgsFromHistoricoRecursive3']
    Historico: Union[bool, 'FindManyHistoricoArgsFromHistoricoRecursive3']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromHistoricoRecursive3']


class AlunosIncludeFromHistoricoRecursive3(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromHistoricoRecursive4']
    Fotos: Union[bool, 'FindManyFotosArgsFromHistoricoRecursive4']
    Historico: Union[bool, 'FindManyHistoricoArgsFromHistoricoRecursive4']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromHistoricoRecursive4']


class AlunosIncludeFromHistoricoRecursive4(TypedDict, total=False):
    """Relational arguments for Historico"""

    

class AlunosArgsFromHistorico(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'AlunosIncludeFromAlunosRecursive1'


class AlunosArgsFromHistoricoRecursive1(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'AlunosIncludeFromAlunosRecursive2'


class AlunosArgsFromHistoricoRecursive2(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'AlunosIncludeFromAlunosRecursive3'


class AlunosArgsFromHistoricoRecursive3(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'AlunosIncludeFromAlunosRecursive4'


class AlunosArgsFromHistoricoRecursive4(TypedDict, total=False):
    """Arguments for Historico"""
    
    

class FindManyAlunosArgsFromHistorico(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive1'


class FindManyAlunosArgsFromHistoricoRecursive1(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive2'


class FindManyAlunosArgsFromHistoricoRecursive2(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive3'


class FindManyAlunosArgsFromHistoricoRecursive3(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive4'


class FindManyAlunosArgsFromHistoricoRecursive4(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    
    

class Alunos_propinaIncludeFromHistorico(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos: Union[bool, 'AlunosArgsFromHistoricoRecursive1']
    Propinas: Union[bool, 'PropinasArgsFromHistoricoRecursive1']


class Alunos_propinaIncludeFromHistoricoRecursive1(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos: Union[bool, 'AlunosArgsFromHistoricoRecursive2']
    Propinas: Union[bool, 'PropinasArgsFromHistoricoRecursive2']


class Alunos_propinaIncludeFromHistoricoRecursive2(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos: Union[bool, 'AlunosArgsFromHistoricoRecursive3']
    Propinas: Union[bool, 'PropinasArgsFromHistoricoRecursive3']


class Alunos_propinaIncludeFromHistoricoRecursive3(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos: Union[bool, 'AlunosArgsFromHistoricoRecursive4']
    Propinas: Union[bool, 'PropinasArgsFromHistoricoRecursive4']


class Alunos_propinaIncludeFromHistoricoRecursive4(TypedDict, total=False):
    """Relational arguments for Historico"""

    

class Alunos_propinaArgsFromHistorico(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive1'


class Alunos_propinaArgsFromHistoricoRecursive1(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive2'


class Alunos_propinaArgsFromHistoricoRecursive2(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive3'


class Alunos_propinaArgsFromHistoricoRecursive3(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive4'


class Alunos_propinaArgsFromHistoricoRecursive4(TypedDict, total=False):
    """Arguments for Historico"""
    
    

class FindManyAlunos_propinaArgsFromHistorico(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive1'


class FindManyAlunos_propinaArgsFromHistoricoRecursive1(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive2'


class FindManyAlunos_propinaArgsFromHistoricoRecursive2(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive3'


class FindManyAlunos_propinaArgsFromHistoricoRecursive3(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive4'


class FindManyAlunos_propinaArgsFromHistoricoRecursive4(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    
    

class FotosIncludeFromHistorico(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos: Union[bool, 'AlunosArgsFromHistoricoRecursive1']


class FotosIncludeFromHistoricoRecursive1(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos: Union[bool, 'AlunosArgsFromHistoricoRecursive2']


class FotosIncludeFromHistoricoRecursive2(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos: Union[bool, 'AlunosArgsFromHistoricoRecursive3']


class FotosIncludeFromHistoricoRecursive3(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos: Union[bool, 'AlunosArgsFromHistoricoRecursive4']


class FotosIncludeFromHistoricoRecursive4(TypedDict, total=False):
    """Relational arguments for Historico"""

    

class FotosArgsFromHistorico(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'FotosIncludeFromFotosRecursive1'


class FotosArgsFromHistoricoRecursive1(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'FotosIncludeFromFotosRecursive2'


class FotosArgsFromHistoricoRecursive2(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'FotosIncludeFromFotosRecursive3'


class FotosArgsFromHistoricoRecursive3(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'FotosIncludeFromFotosRecursive4'


class FotosArgsFromHistoricoRecursive4(TypedDict, total=False):
    """Arguments for Historico"""
    
    

class FindManyFotosArgsFromHistorico(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive1'


class FindManyFotosArgsFromHistoricoRecursive1(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive2'


class FindManyFotosArgsFromHistoricoRecursive2(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive3'


class FindManyFotosArgsFromHistoricoRecursive3(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive4'


class FindManyFotosArgsFromHistoricoRecursive4(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    
    

class HistoricoIncludeFromHistorico(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos: Union[bool, 'AlunosArgsFromHistoricoRecursive1']
    Propinas: Union[bool, 'PropinasArgsFromHistoricoRecursive1']


class HistoricoIncludeFromHistoricoRecursive1(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos: Union[bool, 'AlunosArgsFromHistoricoRecursive2']
    Propinas: Union[bool, 'PropinasArgsFromHistoricoRecursive2']


class HistoricoIncludeFromHistoricoRecursive2(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos: Union[bool, 'AlunosArgsFromHistoricoRecursive3']
    Propinas: Union[bool, 'PropinasArgsFromHistoricoRecursive3']


class HistoricoIncludeFromHistoricoRecursive3(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos: Union[bool, 'AlunosArgsFromHistoricoRecursive4']
    Propinas: Union[bool, 'PropinasArgsFromHistoricoRecursive4']


class HistoricoIncludeFromHistoricoRecursive4(TypedDict, total=False):
    """Relational arguments for Historico"""

    

class HistoricoArgsFromHistorico(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'HistoricoIncludeFromHistoricoRecursive1'


class HistoricoArgsFromHistoricoRecursive1(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'HistoricoIncludeFromHistoricoRecursive2'


class HistoricoArgsFromHistoricoRecursive2(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'HistoricoIncludeFromHistoricoRecursive3'


class HistoricoArgsFromHistoricoRecursive3(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'HistoricoIncludeFromHistoricoRecursive4'


class HistoricoArgsFromHistoricoRecursive4(TypedDict, total=False):
    """Arguments for Historico"""
    
    

class FindManyHistoricoArgsFromHistorico(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive1'


class FindManyHistoricoArgsFromHistoricoRecursive1(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive2'


class FindManyHistoricoArgsFromHistoricoRecursive2(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive3'


class FindManyHistoricoArgsFromHistoricoRecursive3(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive4'


class FindManyHistoricoArgsFromHistoricoRecursive4(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    
    

class PropinasIncludeFromHistorico(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromHistoricoRecursive1']
    Historico: Union[bool, 'FindManyHistoricoArgsFromHistoricoRecursive1']


class PropinasIncludeFromHistoricoRecursive1(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromHistoricoRecursive2']
    Historico: Union[bool, 'FindManyHistoricoArgsFromHistoricoRecursive2']


class PropinasIncludeFromHistoricoRecursive2(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromHistoricoRecursive3']
    Historico: Union[bool, 'FindManyHistoricoArgsFromHistoricoRecursive3']


class PropinasIncludeFromHistoricoRecursive3(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromHistoricoRecursive4']
    Historico: Union[bool, 'FindManyHistoricoArgsFromHistoricoRecursive4']


class PropinasIncludeFromHistoricoRecursive4(TypedDict, total=False):
    """Relational arguments for Historico"""

    

class PropinasArgsFromHistorico(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'PropinasIncludeFromPropinasRecursive1'


class PropinasArgsFromHistoricoRecursive1(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'PropinasIncludeFromPropinasRecursive2'


class PropinasArgsFromHistoricoRecursive2(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'PropinasIncludeFromPropinasRecursive3'


class PropinasArgsFromHistoricoRecursive3(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'PropinasIncludeFromPropinasRecursive4'


class PropinasArgsFromHistoricoRecursive4(TypedDict, total=False):
    """Arguments for Historico"""
    
    

class FindManyPropinasArgsFromHistorico(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive1'


class FindManyPropinasArgsFromHistoricoRecursive1(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive2'


class FindManyPropinasArgsFromHistoricoRecursive2(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive3'


class FindManyPropinasArgsFromHistoricoRecursive3(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive4'


class FindManyPropinasArgsFromHistoricoRecursive4(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    
    

class ReconhecimentoIncludeFromHistorico(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos: Union[bool, 'AlunosArgsFromHistoricoRecursive1']


class ReconhecimentoIncludeFromHistoricoRecursive1(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos: Union[bool, 'AlunosArgsFromHistoricoRecursive2']


class ReconhecimentoIncludeFromHistoricoRecursive2(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos: Union[bool, 'AlunosArgsFromHistoricoRecursive3']


class ReconhecimentoIncludeFromHistoricoRecursive3(TypedDict, total=False):
    """Relational arguments for Historico"""
    Alunos: Union[bool, 'AlunosArgsFromHistoricoRecursive4']


class ReconhecimentoIncludeFromHistoricoRecursive4(TypedDict, total=False):
    """Relational arguments for Historico"""

    

class ReconhecimentoArgsFromHistorico(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive1'


class ReconhecimentoArgsFromHistoricoRecursive1(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive2'


class ReconhecimentoArgsFromHistoricoRecursive2(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive3'


class ReconhecimentoArgsFromHistoricoRecursive3(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive4'


class ReconhecimentoArgsFromHistoricoRecursive4(TypedDict, total=False):
    """Arguments for Historico"""
    
    

class FindManyReconhecimentoArgsFromHistorico(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive1'


class FindManyReconhecimentoArgsFromHistoricoRecursive1(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive2'


class FindManyReconhecimentoArgsFromHistoricoRecursive2(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive3'


class FindManyReconhecimentoArgsFromHistoricoRecursive3(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive4'


class FindManyReconhecimentoArgsFromHistoricoRecursive4(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    
    

class SequelizeMetaIncludeFromHistorico(TypedDict, total=False):
    """Relational arguments for Historico"""


class SequelizeMetaIncludeFromHistoricoRecursive1(TypedDict, total=False):
    """Relational arguments for Historico"""


class SequelizeMetaIncludeFromHistoricoRecursive2(TypedDict, total=False):
    """Relational arguments for Historico"""


class SequelizeMetaIncludeFromHistoricoRecursive3(TypedDict, total=False):
    """Relational arguments for Historico"""


class SequelizeMetaIncludeFromHistoricoRecursive4(TypedDict, total=False):
    """Relational arguments for Historico"""

    

class SequelizeMetaArgsFromHistorico(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive1'


class SequelizeMetaArgsFromHistoricoRecursive1(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive2'


class SequelizeMetaArgsFromHistoricoRecursive2(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive3'


class SequelizeMetaArgsFromHistoricoRecursive3(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive4'


class SequelizeMetaArgsFromHistoricoRecursive4(TypedDict, total=False):
    """Arguments for Historico"""
    
    

class FindManySequelizeMetaArgsFromHistorico(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive1'


class FindManySequelizeMetaArgsFromHistoricoRecursive1(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive2'


class FindManySequelizeMetaArgsFromHistoricoRecursive2(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive3'


class FindManySequelizeMetaArgsFromHistoricoRecursive3(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive4'


class FindManySequelizeMetaArgsFromHistoricoRecursive4(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    
    

class UsersIncludeFromHistorico(TypedDict, total=False):
    """Relational arguments for Historico"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromHistoricoRecursive1']


class UsersIncludeFromHistoricoRecursive1(TypedDict, total=False):
    """Relational arguments for Historico"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromHistoricoRecursive2']


class UsersIncludeFromHistoricoRecursive2(TypedDict, total=False):
    """Relational arguments for Historico"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromHistoricoRecursive3']


class UsersIncludeFromHistoricoRecursive3(TypedDict, total=False):
    """Relational arguments for Historico"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromHistoricoRecursive4']


class UsersIncludeFromHistoricoRecursive4(TypedDict, total=False):
    """Relational arguments for Historico"""

    

class UsersArgsFromHistorico(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromHistoricoRecursive1(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromHistoricoRecursive2(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromHistoricoRecursive3(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromHistoricoRecursive4(TypedDict, total=False):
    """Arguments for Historico"""
    
    

class FindManyUsersArgsFromHistorico(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromHistoricoRecursive1(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromHistoricoRecursive2(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromHistoricoRecursive3(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromHistoricoRecursive4(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class VigilantesIncludeFromHistorico(TypedDict, total=False):
    """Relational arguments for Historico"""
    Users: Union[bool, 'UsersArgsFromHistoricoRecursive1']


class VigilantesIncludeFromHistoricoRecursive1(TypedDict, total=False):
    """Relational arguments for Historico"""
    Users: Union[bool, 'UsersArgsFromHistoricoRecursive2']


class VigilantesIncludeFromHistoricoRecursive2(TypedDict, total=False):
    """Relational arguments for Historico"""
    Users: Union[bool, 'UsersArgsFromHistoricoRecursive3']


class VigilantesIncludeFromHistoricoRecursive3(TypedDict, total=False):
    """Relational arguments for Historico"""
    Users: Union[bool, 'UsersArgsFromHistoricoRecursive4']


class VigilantesIncludeFromHistoricoRecursive4(TypedDict, total=False):
    """Relational arguments for Historico"""

    

class VigilantesArgsFromHistorico(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'VigilantesIncludeFromVigilantesRecursive1'


class VigilantesArgsFromHistoricoRecursive1(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'VigilantesIncludeFromVigilantesRecursive2'


class VigilantesArgsFromHistoricoRecursive2(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'VigilantesIncludeFromVigilantesRecursive3'


class VigilantesArgsFromHistoricoRecursive3(TypedDict, total=False):
    """Arguments for Historico"""
    include: 'VigilantesIncludeFromVigilantesRecursive4'


class VigilantesArgsFromHistoricoRecursive4(TypedDict, total=False):
    """Arguments for Historico"""
    
    

class FindManyVigilantesArgsFromHistorico(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive1'


class FindManyVigilantesArgsFromHistoricoRecursive1(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive2'


class FindManyVigilantesArgsFromHistoricoRecursive2(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive3'


class FindManyVigilantesArgsFromHistoricoRecursive3(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive4'


class FindManyVigilantesArgsFromHistoricoRecursive4(TypedDict, total=False):
    """Arguments for Historico"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    


FindManyHistoricoArgs = FindManyHistoricoArgsFromHistorico
FindFirstHistoricoArgs = FindManyHistoricoArgsFromHistorico


    

class HistoricoWhereInput(TypedDict, total=False):
    """Historico arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    alunoId: Union[None, _int, 'types.IntFilter']
    propinaId: Union[None, _int, 'types.IntFilter']
    status: 'enums.enum_Historico_status'
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos: 'AlunosRelationFilter'
    Propinas: 'PropinasRelationFilter'

    # should be noted that AND and NOT should be Union['HistoricoWhereInputRecursive1', List['HistoricoWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['HistoricoWhereInputRecursive1']
    OR: List['HistoricoWhereInputRecursive1']
    NOT: List['HistoricoWhereInputRecursive1']


class HistoricoWhereInputRecursive1(TypedDict, total=False):
    """Historico arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    alunoId: Union[None, _int, 'types.IntFilter']
    propinaId: Union[None, _int, 'types.IntFilter']
    status: 'enums.enum_Historico_status'
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos: 'AlunosRelationFilter'
    Propinas: 'PropinasRelationFilter'

    # should be noted that AND and NOT should be Union['HistoricoWhereInputRecursive2', List['HistoricoWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['HistoricoWhereInputRecursive2']
    OR: List['HistoricoWhereInputRecursive2']
    NOT: List['HistoricoWhereInputRecursive2']


class HistoricoWhereInputRecursive2(TypedDict, total=False):
    """Historico arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    alunoId: Union[None, _int, 'types.IntFilter']
    propinaId: Union[None, _int, 'types.IntFilter']
    status: 'enums.enum_Historico_status'
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos: 'AlunosRelationFilter'
    Propinas: 'PropinasRelationFilter'

    # should be noted that AND and NOT should be Union['HistoricoWhereInputRecursive3', List['HistoricoWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['HistoricoWhereInputRecursive3']
    OR: List['HistoricoWhereInputRecursive3']
    NOT: List['HistoricoWhereInputRecursive3']


class HistoricoWhereInputRecursive3(TypedDict, total=False):
    """Historico arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    alunoId: Union[None, _int, 'types.IntFilter']
    propinaId: Union[None, _int, 'types.IntFilter']
    status: 'enums.enum_Historico_status'
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos: 'AlunosRelationFilter'
    Propinas: 'PropinasRelationFilter'

    # should be noted that AND and NOT should be Union['HistoricoWhereInputRecursive4', List['HistoricoWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['HistoricoWhereInputRecursive4']
    OR: List['HistoricoWhereInputRecursive4']
    NOT: List['HistoricoWhereInputRecursive4']


class HistoricoWhereInputRecursive4(TypedDict, total=False):
    """Historico arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    alunoId: Union[None, _int, 'types.IntFilter']
    propinaId: Union[None, _int, 'types.IntFilter']
    status: 'enums.enum_Historico_status'
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos: 'AlunosRelationFilter'
    Propinas: 'PropinasRelationFilter'



# aggregate Historico types


    

class HistoricoScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Historico arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    alunoId: Union[_int, 'types.IntWithAggregatesFilter']
    propinaId: Union[_int, 'types.IntWithAggregatesFilter']
    status: 'enums.enum_Historico_status'
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['HistoricoScalarWhereWithAggregatesInputRecursive1']
    OR: List['HistoricoScalarWhereWithAggregatesInputRecursive1']
    NOT: List['HistoricoScalarWhereWithAggregatesInputRecursive1']


class HistoricoScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Historico arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    alunoId: Union[_int, 'types.IntWithAggregatesFilter']
    propinaId: Union[_int, 'types.IntWithAggregatesFilter']
    status: 'enums.enum_Historico_status'
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['HistoricoScalarWhereWithAggregatesInputRecursive2']
    OR: List['HistoricoScalarWhereWithAggregatesInputRecursive2']
    NOT: List['HistoricoScalarWhereWithAggregatesInputRecursive2']


class HistoricoScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Historico arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    alunoId: Union[_int, 'types.IntWithAggregatesFilter']
    propinaId: Union[_int, 'types.IntWithAggregatesFilter']
    status: 'enums.enum_Historico_status'
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['HistoricoScalarWhereWithAggregatesInputRecursive3']
    OR: List['HistoricoScalarWhereWithAggregatesInputRecursive3']
    NOT: List['HistoricoScalarWhereWithAggregatesInputRecursive3']


class HistoricoScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Historico arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    alunoId: Union[_int, 'types.IntWithAggregatesFilter']
    propinaId: Union[_int, 'types.IntWithAggregatesFilter']
    status: 'enums.enum_Historico_status'
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['HistoricoScalarWhereWithAggregatesInputRecursive4']
    OR: List['HistoricoScalarWhereWithAggregatesInputRecursive4']
    NOT: List['HistoricoScalarWhereWithAggregatesInputRecursive4']


class HistoricoScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Historico arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    alunoId: Union[_int, 'types.IntWithAggregatesFilter']
    propinaId: Union[_int, 'types.IntWithAggregatesFilter']
    status: 'enums.enum_Historico_status'
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class HistoricoGroupByOutput(TypedDict, total=False):
    id: _int
    alunoId: _int
    propinaId: _int
    status: 'enums.enum_Historico_status'
    timestamp: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'HistoricoSumAggregateOutput'
    _avg: 'HistoricoAvgAggregateOutput'
    _min: 'HistoricoMinAggregateOutput'
    _max: 'HistoricoMaxAggregateOutput'
    _count: 'HistoricoCountAggregateOutput'


class HistoricoAvgAggregateOutput(TypedDict, total=False):
    """Historico output for aggregating averages"""
    id: float
    alunoId: float
    propinaId: float


class HistoricoSumAggregateOutput(TypedDict, total=False):
    """Historico output for aggregating sums"""
    id: _int
    alunoId: _int
    propinaId: _int


class HistoricoScalarAggregateOutput(TypedDict, total=False):
    """Historico output including scalar fields"""
    id: _int
    alunoId: _int
    propinaId: _int
    status: 'enums.enum_Historico_status'
    timestamp: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


HistoricoMinAggregateOutput = HistoricoScalarAggregateOutput
HistoricoMaxAggregateOutput = HistoricoScalarAggregateOutput


class HistoricoMaxAggregateInput(TypedDict, total=False):
    """Historico input for aggregating by max"""
    id: bool
    alunoId: bool
    propinaId: bool
    status: bool
    timestamp: bool
    createdAt: bool
    updatedAt: bool


class HistoricoMinAggregateInput(TypedDict, total=False):
    """Historico input for aggregating by min"""
    id: bool
    alunoId: bool
    propinaId: bool
    status: bool
    timestamp: bool
    createdAt: bool
    updatedAt: bool


class HistoricoNumberAggregateInput(TypedDict, total=False):
    """Historico input for aggregating numbers"""
    id: bool
    alunoId: bool
    propinaId: bool


HistoricoAvgAggregateInput = HistoricoNumberAggregateInput
HistoricoSumAggregateInput = HistoricoNumberAggregateInput


HistoricoCountAggregateInput = TypedDict(
    'HistoricoCountAggregateInput',
    {
        'id': bool,
        'alunoId': bool,
        'propinaId': bool,
        'status': bool,
        'timestamp': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

HistoricoCountAggregateOutput = TypedDict(
    'HistoricoCountAggregateOutput',
    {
        'id': int,
        'alunoId': int,
        'propinaId': int,
        'status': int,
        'timestamp': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


HistoricoKeys = Literal[
    'id',
    'alunoId',
    'propinaId',
    'status',
    'timestamp',
    'createdAt',
    'updatedAt',
    'Alunos',
    'Propinas',
]
HistoricoScalarFieldKeys = Literal[
    'id',
    'alunoId',
    'propinaId',
    'status',
    'timestamp',
    'createdAt',
    'updatedAt',
]
HistoricoScalarFieldKeysT = TypeVar('HistoricoScalarFieldKeysT', bound=HistoricoScalarFieldKeys)

HistoricoRelationalFieldKeys = Literal[
        'Alunos',
        'Propinas',
    ]

# Propinas types

class PropinasOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Propinas create method"""
    id: _int
    Alunos_propina: 'Alunos_propinaCreateManyNestedWithoutRelationsInput'
    Historico: 'HistoricoCreateManyNestedWithoutRelationsInput'


class PropinasCreateInput(PropinasOptionalCreateInput):
    """Required arguments to the Propinas create method"""
    mes: 'enums.enum_Propinas_mes'
    ano_lectivo: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PropinasOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Propinas create method, without relations"""
    id: _int


class PropinasCreateWithoutRelationsInput(PropinasOptionalCreateWithoutRelationsInput):
    """Required arguments to the Propinas create method, without relations"""
    mes: 'enums.enum_Propinas_mes'
    ano_lectivo: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime

class PropinasConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PropinasCreateWithoutRelationsInput'
    where: 'PropinasWhereUniqueInput'

class PropinasCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PropinasCreateWithoutRelationsInput'
    connect: 'PropinasWhereUniqueInput'
    connect_or_create: 'PropinasConnectOrCreateWithoutRelationsInput'


class PropinasCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PropinasCreateWithoutRelationsInput', List['PropinasCreateWithoutRelationsInput']]
    connect: Union['PropinasWhereUniqueInput', List['PropinasWhereUniqueInput']]
    connect_or_create: Union['PropinasConnectOrCreateWithoutRelationsInput', List['PropinasConnectOrCreateWithoutRelationsInput']]

_PropinasWhereUnique_id_Input = TypedDict(
    '_PropinasWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

PropinasWhereUniqueInput = _PropinasWhereUnique_id_Input


class PropinasUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    mes: 'enums.enum_Propinas_mes'
    ano_lectivo: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    Alunos_propina: 'Alunos_propinaUpdateManyWithoutRelationsInput'
    Historico: 'HistoricoUpdateManyWithoutRelationsInput'


class PropinasUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    mes: 'enums.enum_Propinas_mes'
    ano_lectivo: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PropinasUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PropinasCreateWithoutRelationsInput']
    connect: List['PropinasWhereUniqueInput']
    connect_or_create: List['PropinasConnectOrCreateWithoutRelationsInput']
    set: List['PropinasWhereUniqueInput']
    disconnect: List['PropinasWhereUniqueInput']
    delete: List['PropinasWhereUniqueInput']

    # TODO
    # update: List['PropinasUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PropinasUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PropinasScalarWhereInput']
    # upsert: List['PropinasUpserteWithWhereUniqueWithoutRelationsInput']


class PropinasUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PropinasCreateWithoutRelationsInput'
    connect: 'PropinasWhereUniqueInput'
    connect_or_create: 'PropinasConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PropinasUpdateInput'
    # upsert: 'PropinasUpsertWithoutRelationsInput'


class PropinasUpsertInput(TypedDict):
    create: 'PropinasCreateInput'
    update: 'PropinasUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Propinas_id_OrderByInput = TypedDict(
    '_Propinas_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Propinas_mes_OrderByInput = TypedDict(
    '_Propinas_mes_OrderByInput',
    {
        'mes': 'SortOrder',
    },
    total=True
)

_Propinas_ano_lectivo_OrderByInput = TypedDict(
    '_Propinas_ano_lectivo_OrderByInput',
    {
        'ano_lectivo': 'SortOrder',
    },
    total=True
)

_Propinas_createdAt_OrderByInput = TypedDict(
    '_Propinas_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Propinas_updatedAt_OrderByInput = TypedDict(
    '_Propinas_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Propinas_RelevanceInner = TypedDict(
    '_Propinas_RelevanceInner',
    {
        'fields': 'List[PropinasScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Propinas_RelevanceOrderByInput = TypedDict(
    '_Propinas_RelevanceOrderByInput',
    {
        '_relevance': '_Propinas_RelevanceInner',
    },
    total=True
)

PropinasOrderByInput = Union[
    '_Propinas_id_OrderByInput',
    '_Propinas_mes_OrderByInput',
    '_Propinas_ano_lectivo_OrderByInput',
    '_Propinas_createdAt_OrderByInput',
    '_Propinas_updatedAt_OrderByInput',
    '_Propinas_RelevanceOrderByInput',
]



# recursive Propinas types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PropinasRelationFilter = TypedDict(
    'PropinasRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PropinasListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PropinasInclude(TypedDict, total=False):
    """Propinas relational arguments"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromPropinas']
    Historico: Union[bool, 'FindManyHistoricoArgsFromPropinas']


    

class AlunosIncludeFromPropinas(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromPropinasRecursive1']
    Fotos: Union[bool, 'FindManyFotosArgsFromPropinasRecursive1']
    Historico: Union[bool, 'FindManyHistoricoArgsFromPropinasRecursive1']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromPropinasRecursive1']


class AlunosIncludeFromPropinasRecursive1(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromPropinasRecursive2']
    Fotos: Union[bool, 'FindManyFotosArgsFromPropinasRecursive2']
    Historico: Union[bool, 'FindManyHistoricoArgsFromPropinasRecursive2']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromPropinasRecursive2']


class AlunosIncludeFromPropinasRecursive2(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromPropinasRecursive3']
    Fotos: Union[bool, 'FindManyFotosArgsFromPropinasRecursive3']
    Historico: Union[bool, 'FindManyHistoricoArgsFromPropinasRecursive3']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromPropinasRecursive3']


class AlunosIncludeFromPropinasRecursive3(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromPropinasRecursive4']
    Fotos: Union[bool, 'FindManyFotosArgsFromPropinasRecursive4']
    Historico: Union[bool, 'FindManyHistoricoArgsFromPropinasRecursive4']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromPropinasRecursive4']


class AlunosIncludeFromPropinasRecursive4(TypedDict, total=False):
    """Relational arguments for Propinas"""

    

class AlunosArgsFromPropinas(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'AlunosIncludeFromAlunosRecursive1'


class AlunosArgsFromPropinasRecursive1(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'AlunosIncludeFromAlunosRecursive2'


class AlunosArgsFromPropinasRecursive2(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'AlunosIncludeFromAlunosRecursive3'


class AlunosArgsFromPropinasRecursive3(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'AlunosIncludeFromAlunosRecursive4'


class AlunosArgsFromPropinasRecursive4(TypedDict, total=False):
    """Arguments for Propinas"""
    
    

class FindManyAlunosArgsFromPropinas(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive1'


class FindManyAlunosArgsFromPropinasRecursive1(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive2'


class FindManyAlunosArgsFromPropinasRecursive2(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive3'


class FindManyAlunosArgsFromPropinasRecursive3(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive4'


class FindManyAlunosArgsFromPropinasRecursive4(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    
    

class Alunos_propinaIncludeFromPropinas(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos: Union[bool, 'AlunosArgsFromPropinasRecursive1']
    Propinas: Union[bool, 'PropinasArgsFromPropinasRecursive1']


class Alunos_propinaIncludeFromPropinasRecursive1(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos: Union[bool, 'AlunosArgsFromPropinasRecursive2']
    Propinas: Union[bool, 'PropinasArgsFromPropinasRecursive2']


class Alunos_propinaIncludeFromPropinasRecursive2(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos: Union[bool, 'AlunosArgsFromPropinasRecursive3']
    Propinas: Union[bool, 'PropinasArgsFromPropinasRecursive3']


class Alunos_propinaIncludeFromPropinasRecursive3(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos: Union[bool, 'AlunosArgsFromPropinasRecursive4']
    Propinas: Union[bool, 'PropinasArgsFromPropinasRecursive4']


class Alunos_propinaIncludeFromPropinasRecursive4(TypedDict, total=False):
    """Relational arguments for Propinas"""

    

class Alunos_propinaArgsFromPropinas(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive1'


class Alunos_propinaArgsFromPropinasRecursive1(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive2'


class Alunos_propinaArgsFromPropinasRecursive2(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive3'


class Alunos_propinaArgsFromPropinasRecursive3(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive4'


class Alunos_propinaArgsFromPropinasRecursive4(TypedDict, total=False):
    """Arguments for Propinas"""
    
    

class FindManyAlunos_propinaArgsFromPropinas(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive1'


class FindManyAlunos_propinaArgsFromPropinasRecursive1(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive2'


class FindManyAlunos_propinaArgsFromPropinasRecursive2(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive3'


class FindManyAlunos_propinaArgsFromPropinasRecursive3(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive4'


class FindManyAlunos_propinaArgsFromPropinasRecursive4(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    
    

class FotosIncludeFromPropinas(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos: Union[bool, 'AlunosArgsFromPropinasRecursive1']


class FotosIncludeFromPropinasRecursive1(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos: Union[bool, 'AlunosArgsFromPropinasRecursive2']


class FotosIncludeFromPropinasRecursive2(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos: Union[bool, 'AlunosArgsFromPropinasRecursive3']


class FotosIncludeFromPropinasRecursive3(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos: Union[bool, 'AlunosArgsFromPropinasRecursive4']


class FotosIncludeFromPropinasRecursive4(TypedDict, total=False):
    """Relational arguments for Propinas"""

    

class FotosArgsFromPropinas(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'FotosIncludeFromFotosRecursive1'


class FotosArgsFromPropinasRecursive1(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'FotosIncludeFromFotosRecursive2'


class FotosArgsFromPropinasRecursive2(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'FotosIncludeFromFotosRecursive3'


class FotosArgsFromPropinasRecursive3(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'FotosIncludeFromFotosRecursive4'


class FotosArgsFromPropinasRecursive4(TypedDict, total=False):
    """Arguments for Propinas"""
    
    

class FindManyFotosArgsFromPropinas(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive1'


class FindManyFotosArgsFromPropinasRecursive1(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive2'


class FindManyFotosArgsFromPropinasRecursive2(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive3'


class FindManyFotosArgsFromPropinasRecursive3(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive4'


class FindManyFotosArgsFromPropinasRecursive4(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    
    

class HistoricoIncludeFromPropinas(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos: Union[bool, 'AlunosArgsFromPropinasRecursive1']
    Propinas: Union[bool, 'PropinasArgsFromPropinasRecursive1']


class HistoricoIncludeFromPropinasRecursive1(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos: Union[bool, 'AlunosArgsFromPropinasRecursive2']
    Propinas: Union[bool, 'PropinasArgsFromPropinasRecursive2']


class HistoricoIncludeFromPropinasRecursive2(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos: Union[bool, 'AlunosArgsFromPropinasRecursive3']
    Propinas: Union[bool, 'PropinasArgsFromPropinasRecursive3']


class HistoricoIncludeFromPropinasRecursive3(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos: Union[bool, 'AlunosArgsFromPropinasRecursive4']
    Propinas: Union[bool, 'PropinasArgsFromPropinasRecursive4']


class HistoricoIncludeFromPropinasRecursive4(TypedDict, total=False):
    """Relational arguments for Propinas"""

    

class HistoricoArgsFromPropinas(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'HistoricoIncludeFromHistoricoRecursive1'


class HistoricoArgsFromPropinasRecursive1(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'HistoricoIncludeFromHistoricoRecursive2'


class HistoricoArgsFromPropinasRecursive2(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'HistoricoIncludeFromHistoricoRecursive3'


class HistoricoArgsFromPropinasRecursive3(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'HistoricoIncludeFromHistoricoRecursive4'


class HistoricoArgsFromPropinasRecursive4(TypedDict, total=False):
    """Arguments for Propinas"""
    
    

class FindManyHistoricoArgsFromPropinas(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive1'


class FindManyHistoricoArgsFromPropinasRecursive1(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive2'


class FindManyHistoricoArgsFromPropinasRecursive2(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive3'


class FindManyHistoricoArgsFromPropinasRecursive3(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive4'


class FindManyHistoricoArgsFromPropinasRecursive4(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    
    

class PropinasIncludeFromPropinas(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromPropinasRecursive1']
    Historico: Union[bool, 'FindManyHistoricoArgsFromPropinasRecursive1']


class PropinasIncludeFromPropinasRecursive1(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromPropinasRecursive2']
    Historico: Union[bool, 'FindManyHistoricoArgsFromPropinasRecursive2']


class PropinasIncludeFromPropinasRecursive2(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromPropinasRecursive3']
    Historico: Union[bool, 'FindManyHistoricoArgsFromPropinasRecursive3']


class PropinasIncludeFromPropinasRecursive3(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromPropinasRecursive4']
    Historico: Union[bool, 'FindManyHistoricoArgsFromPropinasRecursive4']


class PropinasIncludeFromPropinasRecursive4(TypedDict, total=False):
    """Relational arguments for Propinas"""

    

class PropinasArgsFromPropinas(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'PropinasIncludeFromPropinasRecursive1'


class PropinasArgsFromPropinasRecursive1(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'PropinasIncludeFromPropinasRecursive2'


class PropinasArgsFromPropinasRecursive2(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'PropinasIncludeFromPropinasRecursive3'


class PropinasArgsFromPropinasRecursive3(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'PropinasIncludeFromPropinasRecursive4'


class PropinasArgsFromPropinasRecursive4(TypedDict, total=False):
    """Arguments for Propinas"""
    
    

class FindManyPropinasArgsFromPropinas(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive1'


class FindManyPropinasArgsFromPropinasRecursive1(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive2'


class FindManyPropinasArgsFromPropinasRecursive2(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive3'


class FindManyPropinasArgsFromPropinasRecursive3(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive4'


class FindManyPropinasArgsFromPropinasRecursive4(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    
    

class ReconhecimentoIncludeFromPropinas(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos: Union[bool, 'AlunosArgsFromPropinasRecursive1']


class ReconhecimentoIncludeFromPropinasRecursive1(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos: Union[bool, 'AlunosArgsFromPropinasRecursive2']


class ReconhecimentoIncludeFromPropinasRecursive2(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos: Union[bool, 'AlunosArgsFromPropinasRecursive3']


class ReconhecimentoIncludeFromPropinasRecursive3(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Alunos: Union[bool, 'AlunosArgsFromPropinasRecursive4']


class ReconhecimentoIncludeFromPropinasRecursive4(TypedDict, total=False):
    """Relational arguments for Propinas"""

    

class ReconhecimentoArgsFromPropinas(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive1'


class ReconhecimentoArgsFromPropinasRecursive1(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive2'


class ReconhecimentoArgsFromPropinasRecursive2(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive3'


class ReconhecimentoArgsFromPropinasRecursive3(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive4'


class ReconhecimentoArgsFromPropinasRecursive4(TypedDict, total=False):
    """Arguments for Propinas"""
    
    

class FindManyReconhecimentoArgsFromPropinas(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive1'


class FindManyReconhecimentoArgsFromPropinasRecursive1(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive2'


class FindManyReconhecimentoArgsFromPropinasRecursive2(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive3'


class FindManyReconhecimentoArgsFromPropinasRecursive3(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive4'


class FindManyReconhecimentoArgsFromPropinasRecursive4(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    
    

class SequelizeMetaIncludeFromPropinas(TypedDict, total=False):
    """Relational arguments for Propinas"""


class SequelizeMetaIncludeFromPropinasRecursive1(TypedDict, total=False):
    """Relational arguments for Propinas"""


class SequelizeMetaIncludeFromPropinasRecursive2(TypedDict, total=False):
    """Relational arguments for Propinas"""


class SequelizeMetaIncludeFromPropinasRecursive3(TypedDict, total=False):
    """Relational arguments for Propinas"""


class SequelizeMetaIncludeFromPropinasRecursive4(TypedDict, total=False):
    """Relational arguments for Propinas"""

    

class SequelizeMetaArgsFromPropinas(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive1'


class SequelizeMetaArgsFromPropinasRecursive1(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive2'


class SequelizeMetaArgsFromPropinasRecursive2(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive3'


class SequelizeMetaArgsFromPropinasRecursive3(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive4'


class SequelizeMetaArgsFromPropinasRecursive4(TypedDict, total=False):
    """Arguments for Propinas"""
    
    

class FindManySequelizeMetaArgsFromPropinas(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive1'


class FindManySequelizeMetaArgsFromPropinasRecursive1(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive2'


class FindManySequelizeMetaArgsFromPropinasRecursive2(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive3'


class FindManySequelizeMetaArgsFromPropinasRecursive3(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive4'


class FindManySequelizeMetaArgsFromPropinasRecursive4(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    
    

class UsersIncludeFromPropinas(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromPropinasRecursive1']


class UsersIncludeFromPropinasRecursive1(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromPropinasRecursive2']


class UsersIncludeFromPropinasRecursive2(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromPropinasRecursive3']


class UsersIncludeFromPropinasRecursive3(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromPropinasRecursive4']


class UsersIncludeFromPropinasRecursive4(TypedDict, total=False):
    """Relational arguments for Propinas"""

    

class UsersArgsFromPropinas(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromPropinasRecursive1(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromPropinasRecursive2(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromPropinasRecursive3(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromPropinasRecursive4(TypedDict, total=False):
    """Arguments for Propinas"""
    
    

class FindManyUsersArgsFromPropinas(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromPropinasRecursive1(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromPropinasRecursive2(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromPropinasRecursive3(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromPropinasRecursive4(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class VigilantesIncludeFromPropinas(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Users: Union[bool, 'UsersArgsFromPropinasRecursive1']


class VigilantesIncludeFromPropinasRecursive1(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Users: Union[bool, 'UsersArgsFromPropinasRecursive2']


class VigilantesIncludeFromPropinasRecursive2(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Users: Union[bool, 'UsersArgsFromPropinasRecursive3']


class VigilantesIncludeFromPropinasRecursive3(TypedDict, total=False):
    """Relational arguments for Propinas"""
    Users: Union[bool, 'UsersArgsFromPropinasRecursive4']


class VigilantesIncludeFromPropinasRecursive4(TypedDict, total=False):
    """Relational arguments for Propinas"""

    

class VigilantesArgsFromPropinas(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'VigilantesIncludeFromVigilantesRecursive1'


class VigilantesArgsFromPropinasRecursive1(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'VigilantesIncludeFromVigilantesRecursive2'


class VigilantesArgsFromPropinasRecursive2(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'VigilantesIncludeFromVigilantesRecursive3'


class VigilantesArgsFromPropinasRecursive3(TypedDict, total=False):
    """Arguments for Propinas"""
    include: 'VigilantesIncludeFromVigilantesRecursive4'


class VigilantesArgsFromPropinasRecursive4(TypedDict, total=False):
    """Arguments for Propinas"""
    
    

class FindManyVigilantesArgsFromPropinas(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive1'


class FindManyVigilantesArgsFromPropinasRecursive1(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive2'


class FindManyVigilantesArgsFromPropinasRecursive2(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive3'


class FindManyVigilantesArgsFromPropinasRecursive3(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive4'


class FindManyVigilantesArgsFromPropinasRecursive4(TypedDict, total=False):
    """Arguments for Propinas"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    


FindManyPropinasArgs = FindManyPropinasArgsFromPropinas
FindFirstPropinasArgs = FindManyPropinasArgsFromPropinas


    

class PropinasWhereInput(TypedDict, total=False):
    """Propinas arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    mes: 'enums.enum_Propinas_mes'
    ano_lectivo: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos_propina: 'Alunos_propinaListRelationFilter'
    Historico: 'HistoricoListRelationFilter'

    # should be noted that AND and NOT should be Union['PropinasWhereInputRecursive1', List['PropinasWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PropinasWhereInputRecursive1']
    OR: List['PropinasWhereInputRecursive1']
    NOT: List['PropinasWhereInputRecursive1']


class PropinasWhereInputRecursive1(TypedDict, total=False):
    """Propinas arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    mes: 'enums.enum_Propinas_mes'
    ano_lectivo: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos_propina: 'Alunos_propinaListRelationFilter'
    Historico: 'HistoricoListRelationFilter'

    # should be noted that AND and NOT should be Union['PropinasWhereInputRecursive2', List['PropinasWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PropinasWhereInputRecursive2']
    OR: List['PropinasWhereInputRecursive2']
    NOT: List['PropinasWhereInputRecursive2']


class PropinasWhereInputRecursive2(TypedDict, total=False):
    """Propinas arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    mes: 'enums.enum_Propinas_mes'
    ano_lectivo: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos_propina: 'Alunos_propinaListRelationFilter'
    Historico: 'HistoricoListRelationFilter'

    # should be noted that AND and NOT should be Union['PropinasWhereInputRecursive3', List['PropinasWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PropinasWhereInputRecursive3']
    OR: List['PropinasWhereInputRecursive3']
    NOT: List['PropinasWhereInputRecursive3']


class PropinasWhereInputRecursive3(TypedDict, total=False):
    """Propinas arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    mes: 'enums.enum_Propinas_mes'
    ano_lectivo: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos_propina: 'Alunos_propinaListRelationFilter'
    Historico: 'HistoricoListRelationFilter'

    # should be noted that AND and NOT should be Union['PropinasWhereInputRecursive4', List['PropinasWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PropinasWhereInputRecursive4']
    OR: List['PropinasWhereInputRecursive4']
    NOT: List['PropinasWhereInputRecursive4']


class PropinasWhereInputRecursive4(TypedDict, total=False):
    """Propinas arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    mes: 'enums.enum_Propinas_mes'
    ano_lectivo: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos_propina: 'Alunos_propinaListRelationFilter'
    Historico: 'HistoricoListRelationFilter'



# aggregate Propinas types


    

class PropinasScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Propinas arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    mes: 'enums.enum_Propinas_mes'
    ano_lectivo: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PropinasScalarWhereWithAggregatesInputRecursive1']
    OR: List['PropinasScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PropinasScalarWhereWithAggregatesInputRecursive1']


class PropinasScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Propinas arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    mes: 'enums.enum_Propinas_mes'
    ano_lectivo: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PropinasScalarWhereWithAggregatesInputRecursive2']
    OR: List['PropinasScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PropinasScalarWhereWithAggregatesInputRecursive2']


class PropinasScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Propinas arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    mes: 'enums.enum_Propinas_mes'
    ano_lectivo: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PropinasScalarWhereWithAggregatesInputRecursive3']
    OR: List['PropinasScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PropinasScalarWhereWithAggregatesInputRecursive3']


class PropinasScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Propinas arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    mes: 'enums.enum_Propinas_mes'
    ano_lectivo: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PropinasScalarWhereWithAggregatesInputRecursive4']
    OR: List['PropinasScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PropinasScalarWhereWithAggregatesInputRecursive4']


class PropinasScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Propinas arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    mes: 'enums.enum_Propinas_mes'
    ano_lectivo: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class PropinasGroupByOutput(TypedDict, total=False):
    id: _int
    mes: 'enums.enum_Propinas_mes'
    ano_lectivo: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'PropinasSumAggregateOutput'
    _avg: 'PropinasAvgAggregateOutput'
    _min: 'PropinasMinAggregateOutput'
    _max: 'PropinasMaxAggregateOutput'
    _count: 'PropinasCountAggregateOutput'


class PropinasAvgAggregateOutput(TypedDict, total=False):
    """Propinas output for aggregating averages"""
    id: float


class PropinasSumAggregateOutput(TypedDict, total=False):
    """Propinas output for aggregating sums"""
    id: _int


class PropinasScalarAggregateOutput(TypedDict, total=False):
    """Propinas output including scalar fields"""
    id: _int
    mes: 'enums.enum_Propinas_mes'
    ano_lectivo: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


PropinasMinAggregateOutput = PropinasScalarAggregateOutput
PropinasMaxAggregateOutput = PropinasScalarAggregateOutput


class PropinasMaxAggregateInput(TypedDict, total=False):
    """Propinas input for aggregating by max"""
    id: bool
    mes: bool
    ano_lectivo: bool
    createdAt: bool
    updatedAt: bool


class PropinasMinAggregateInput(TypedDict, total=False):
    """Propinas input for aggregating by min"""
    id: bool
    mes: bool
    ano_lectivo: bool
    createdAt: bool
    updatedAt: bool


class PropinasNumberAggregateInput(TypedDict, total=False):
    """Propinas input for aggregating numbers"""
    id: bool


PropinasAvgAggregateInput = PropinasNumberAggregateInput
PropinasSumAggregateInput = PropinasNumberAggregateInput


PropinasCountAggregateInput = TypedDict(
    'PropinasCountAggregateInput',
    {
        'id': bool,
        'mes': bool,
        'ano_lectivo': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

PropinasCountAggregateOutput = TypedDict(
    'PropinasCountAggregateOutput',
    {
        'id': int,
        'mes': int,
        'ano_lectivo': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


PropinasKeys = Literal[
    'id',
    'mes',
    'ano_lectivo',
    'createdAt',
    'updatedAt',
    'Alunos_propina',
    'Historico',
]
PropinasScalarFieldKeys = Literal[
    'id',
    'mes',
    'ano_lectivo',
    'createdAt',
    'updatedAt',
]
PropinasScalarFieldKeysT = TypeVar('PropinasScalarFieldKeysT', bound=PropinasScalarFieldKeys)

PropinasRelationalFieldKeys = Literal[
        'Alunos_propina',
        'Historico',
    ]

# Reconhecimento types

class ReconhecimentoOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Reconhecimento create method"""
    id: _int
    alunoId: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    Alunos: 'AlunosCreateNestedWithoutRelationsInput'


class ReconhecimentoCreateInput(ReconhecimentoOptionalCreateInput):
    """Required arguments to the Reconhecimento create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ReconhecimentoOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Reconhecimento create method, without relations"""
    id: _int
    alunoId: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ReconhecimentoCreateWithoutRelationsInput(ReconhecimentoOptionalCreateWithoutRelationsInput):
    """Required arguments to the Reconhecimento create method, without relations"""

class ReconhecimentoConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ReconhecimentoCreateWithoutRelationsInput'
    where: 'ReconhecimentoWhereUniqueInput'

class ReconhecimentoCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ReconhecimentoCreateWithoutRelationsInput'
    connect: 'ReconhecimentoWhereUniqueInput'
    connect_or_create: 'ReconhecimentoConnectOrCreateWithoutRelationsInput'


class ReconhecimentoCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ReconhecimentoCreateWithoutRelationsInput', List['ReconhecimentoCreateWithoutRelationsInput']]
    connect: Union['ReconhecimentoWhereUniqueInput', List['ReconhecimentoWhereUniqueInput']]
    connect_or_create: Union['ReconhecimentoConnectOrCreateWithoutRelationsInput', List['ReconhecimentoConnectOrCreateWithoutRelationsInput']]

_ReconhecimentoWhereUnique_id_Input = TypedDict(
    '_ReconhecimentoWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

ReconhecimentoWhereUniqueInput = _ReconhecimentoWhereUnique_id_Input


class ReconhecimentoUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    Alunos: 'AlunosUpdateOneWithoutRelationsInput'


class ReconhecimentoUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ReconhecimentoUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ReconhecimentoCreateWithoutRelationsInput']
    connect: List['ReconhecimentoWhereUniqueInput']
    connect_or_create: List['ReconhecimentoConnectOrCreateWithoutRelationsInput']
    set: List['ReconhecimentoWhereUniqueInput']
    disconnect: List['ReconhecimentoWhereUniqueInput']
    delete: List['ReconhecimentoWhereUniqueInput']

    # TODO
    # update: List['ReconhecimentoUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ReconhecimentoUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ReconhecimentoScalarWhereInput']
    # upsert: List['ReconhecimentoUpserteWithWhereUniqueWithoutRelationsInput']


class ReconhecimentoUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ReconhecimentoCreateWithoutRelationsInput'
    connect: 'ReconhecimentoWhereUniqueInput'
    connect_or_create: 'ReconhecimentoConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ReconhecimentoUpdateInput'
    # upsert: 'ReconhecimentoUpsertWithoutRelationsInput'


class ReconhecimentoUpsertInput(TypedDict):
    create: 'ReconhecimentoCreateInput'
    update: 'ReconhecimentoUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Reconhecimento_id_OrderByInput = TypedDict(
    '_Reconhecimento_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Reconhecimento_alunoId_OrderByInput = TypedDict(
    '_Reconhecimento_alunoId_OrderByInput',
    {
        'alunoId': 'SortOrder',
    },
    total=True
)

_Reconhecimento_createdAt_OrderByInput = TypedDict(
    '_Reconhecimento_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Reconhecimento_updatedAt_OrderByInput = TypedDict(
    '_Reconhecimento_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Reconhecimento_RelevanceInner = TypedDict(
    '_Reconhecimento_RelevanceInner',
    {
        'fields': 'List[ReconhecimentoScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Reconhecimento_RelevanceOrderByInput = TypedDict(
    '_Reconhecimento_RelevanceOrderByInput',
    {
        '_relevance': '_Reconhecimento_RelevanceInner',
    },
    total=True
)

ReconhecimentoOrderByInput = Union[
    '_Reconhecimento_id_OrderByInput',
    '_Reconhecimento_alunoId_OrderByInput',
    '_Reconhecimento_createdAt_OrderByInput',
    '_Reconhecimento_updatedAt_OrderByInput',
    '_Reconhecimento_RelevanceOrderByInput',
]



# recursive Reconhecimento types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ReconhecimentoRelationFilter = TypedDict(
    'ReconhecimentoRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ReconhecimentoListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ReconhecimentoInclude(TypedDict, total=False):
    """Reconhecimento relational arguments"""
    Alunos: Union[bool, 'AlunosArgsFromReconhecimento']


    

class AlunosIncludeFromReconhecimento(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromReconhecimentoRecursive1']
    Fotos: Union[bool, 'FindManyFotosArgsFromReconhecimentoRecursive1']
    Historico: Union[bool, 'FindManyHistoricoArgsFromReconhecimentoRecursive1']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromReconhecimentoRecursive1']


class AlunosIncludeFromReconhecimentoRecursive1(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromReconhecimentoRecursive2']
    Fotos: Union[bool, 'FindManyFotosArgsFromReconhecimentoRecursive2']
    Historico: Union[bool, 'FindManyHistoricoArgsFromReconhecimentoRecursive2']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromReconhecimentoRecursive2']


class AlunosIncludeFromReconhecimentoRecursive2(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromReconhecimentoRecursive3']
    Fotos: Union[bool, 'FindManyFotosArgsFromReconhecimentoRecursive3']
    Historico: Union[bool, 'FindManyHistoricoArgsFromReconhecimentoRecursive3']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromReconhecimentoRecursive3']


class AlunosIncludeFromReconhecimentoRecursive3(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromReconhecimentoRecursive4']
    Fotos: Union[bool, 'FindManyFotosArgsFromReconhecimentoRecursive4']
    Historico: Union[bool, 'FindManyHistoricoArgsFromReconhecimentoRecursive4']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromReconhecimentoRecursive4']


class AlunosIncludeFromReconhecimentoRecursive4(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""

    

class AlunosArgsFromReconhecimento(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'AlunosIncludeFromAlunosRecursive1'


class AlunosArgsFromReconhecimentoRecursive1(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'AlunosIncludeFromAlunosRecursive2'


class AlunosArgsFromReconhecimentoRecursive2(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'AlunosIncludeFromAlunosRecursive3'


class AlunosArgsFromReconhecimentoRecursive3(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'AlunosIncludeFromAlunosRecursive4'


class AlunosArgsFromReconhecimentoRecursive4(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    
    

class FindManyAlunosArgsFromReconhecimento(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive1'


class FindManyAlunosArgsFromReconhecimentoRecursive1(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive2'


class FindManyAlunosArgsFromReconhecimentoRecursive2(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive3'


class FindManyAlunosArgsFromReconhecimentoRecursive3(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive4'


class FindManyAlunosArgsFromReconhecimentoRecursive4(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    
    

class Alunos_propinaIncludeFromReconhecimento(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos: Union[bool, 'AlunosArgsFromReconhecimentoRecursive1']
    Propinas: Union[bool, 'PropinasArgsFromReconhecimentoRecursive1']


class Alunos_propinaIncludeFromReconhecimentoRecursive1(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos: Union[bool, 'AlunosArgsFromReconhecimentoRecursive2']
    Propinas: Union[bool, 'PropinasArgsFromReconhecimentoRecursive2']


class Alunos_propinaIncludeFromReconhecimentoRecursive2(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos: Union[bool, 'AlunosArgsFromReconhecimentoRecursive3']
    Propinas: Union[bool, 'PropinasArgsFromReconhecimentoRecursive3']


class Alunos_propinaIncludeFromReconhecimentoRecursive3(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos: Union[bool, 'AlunosArgsFromReconhecimentoRecursive4']
    Propinas: Union[bool, 'PropinasArgsFromReconhecimentoRecursive4']


class Alunos_propinaIncludeFromReconhecimentoRecursive4(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""

    

class Alunos_propinaArgsFromReconhecimento(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive1'


class Alunos_propinaArgsFromReconhecimentoRecursive1(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive2'


class Alunos_propinaArgsFromReconhecimentoRecursive2(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive3'


class Alunos_propinaArgsFromReconhecimentoRecursive3(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive4'


class Alunos_propinaArgsFromReconhecimentoRecursive4(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    
    

class FindManyAlunos_propinaArgsFromReconhecimento(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive1'


class FindManyAlunos_propinaArgsFromReconhecimentoRecursive1(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive2'


class FindManyAlunos_propinaArgsFromReconhecimentoRecursive2(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive3'


class FindManyAlunos_propinaArgsFromReconhecimentoRecursive3(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive4'


class FindManyAlunos_propinaArgsFromReconhecimentoRecursive4(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    
    

class FotosIncludeFromReconhecimento(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos: Union[bool, 'AlunosArgsFromReconhecimentoRecursive1']


class FotosIncludeFromReconhecimentoRecursive1(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos: Union[bool, 'AlunosArgsFromReconhecimentoRecursive2']


class FotosIncludeFromReconhecimentoRecursive2(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos: Union[bool, 'AlunosArgsFromReconhecimentoRecursive3']


class FotosIncludeFromReconhecimentoRecursive3(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos: Union[bool, 'AlunosArgsFromReconhecimentoRecursive4']


class FotosIncludeFromReconhecimentoRecursive4(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""

    

class FotosArgsFromReconhecimento(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'FotosIncludeFromFotosRecursive1'


class FotosArgsFromReconhecimentoRecursive1(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'FotosIncludeFromFotosRecursive2'


class FotosArgsFromReconhecimentoRecursive2(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'FotosIncludeFromFotosRecursive3'


class FotosArgsFromReconhecimentoRecursive3(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'FotosIncludeFromFotosRecursive4'


class FotosArgsFromReconhecimentoRecursive4(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    
    

class FindManyFotosArgsFromReconhecimento(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive1'


class FindManyFotosArgsFromReconhecimentoRecursive1(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive2'


class FindManyFotosArgsFromReconhecimentoRecursive2(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive3'


class FindManyFotosArgsFromReconhecimentoRecursive3(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive4'


class FindManyFotosArgsFromReconhecimentoRecursive4(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    
    

class HistoricoIncludeFromReconhecimento(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos: Union[bool, 'AlunosArgsFromReconhecimentoRecursive1']
    Propinas: Union[bool, 'PropinasArgsFromReconhecimentoRecursive1']


class HistoricoIncludeFromReconhecimentoRecursive1(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos: Union[bool, 'AlunosArgsFromReconhecimentoRecursive2']
    Propinas: Union[bool, 'PropinasArgsFromReconhecimentoRecursive2']


class HistoricoIncludeFromReconhecimentoRecursive2(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos: Union[bool, 'AlunosArgsFromReconhecimentoRecursive3']
    Propinas: Union[bool, 'PropinasArgsFromReconhecimentoRecursive3']


class HistoricoIncludeFromReconhecimentoRecursive3(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos: Union[bool, 'AlunosArgsFromReconhecimentoRecursive4']
    Propinas: Union[bool, 'PropinasArgsFromReconhecimentoRecursive4']


class HistoricoIncludeFromReconhecimentoRecursive4(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""

    

class HistoricoArgsFromReconhecimento(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'HistoricoIncludeFromHistoricoRecursive1'


class HistoricoArgsFromReconhecimentoRecursive1(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'HistoricoIncludeFromHistoricoRecursive2'


class HistoricoArgsFromReconhecimentoRecursive2(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'HistoricoIncludeFromHistoricoRecursive3'


class HistoricoArgsFromReconhecimentoRecursive3(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'HistoricoIncludeFromHistoricoRecursive4'


class HistoricoArgsFromReconhecimentoRecursive4(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    
    

class FindManyHistoricoArgsFromReconhecimento(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive1'


class FindManyHistoricoArgsFromReconhecimentoRecursive1(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive2'


class FindManyHistoricoArgsFromReconhecimentoRecursive2(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive3'


class FindManyHistoricoArgsFromReconhecimentoRecursive3(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive4'


class FindManyHistoricoArgsFromReconhecimentoRecursive4(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    
    

class PropinasIncludeFromReconhecimento(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromReconhecimentoRecursive1']
    Historico: Union[bool, 'FindManyHistoricoArgsFromReconhecimentoRecursive1']


class PropinasIncludeFromReconhecimentoRecursive1(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromReconhecimentoRecursive2']
    Historico: Union[bool, 'FindManyHistoricoArgsFromReconhecimentoRecursive2']


class PropinasIncludeFromReconhecimentoRecursive2(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromReconhecimentoRecursive3']
    Historico: Union[bool, 'FindManyHistoricoArgsFromReconhecimentoRecursive3']


class PropinasIncludeFromReconhecimentoRecursive3(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromReconhecimentoRecursive4']
    Historico: Union[bool, 'FindManyHistoricoArgsFromReconhecimentoRecursive4']


class PropinasIncludeFromReconhecimentoRecursive4(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""

    

class PropinasArgsFromReconhecimento(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'PropinasIncludeFromPropinasRecursive1'


class PropinasArgsFromReconhecimentoRecursive1(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'PropinasIncludeFromPropinasRecursive2'


class PropinasArgsFromReconhecimentoRecursive2(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'PropinasIncludeFromPropinasRecursive3'


class PropinasArgsFromReconhecimentoRecursive3(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'PropinasIncludeFromPropinasRecursive4'


class PropinasArgsFromReconhecimentoRecursive4(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    
    

class FindManyPropinasArgsFromReconhecimento(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive1'


class FindManyPropinasArgsFromReconhecimentoRecursive1(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive2'


class FindManyPropinasArgsFromReconhecimentoRecursive2(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive3'


class FindManyPropinasArgsFromReconhecimentoRecursive3(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive4'


class FindManyPropinasArgsFromReconhecimentoRecursive4(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    
    

class ReconhecimentoIncludeFromReconhecimento(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos: Union[bool, 'AlunosArgsFromReconhecimentoRecursive1']


class ReconhecimentoIncludeFromReconhecimentoRecursive1(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos: Union[bool, 'AlunosArgsFromReconhecimentoRecursive2']


class ReconhecimentoIncludeFromReconhecimentoRecursive2(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos: Union[bool, 'AlunosArgsFromReconhecimentoRecursive3']


class ReconhecimentoIncludeFromReconhecimentoRecursive3(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Alunos: Union[bool, 'AlunosArgsFromReconhecimentoRecursive4']


class ReconhecimentoIncludeFromReconhecimentoRecursive4(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""

    

class ReconhecimentoArgsFromReconhecimento(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive1'


class ReconhecimentoArgsFromReconhecimentoRecursive1(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive2'


class ReconhecimentoArgsFromReconhecimentoRecursive2(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive3'


class ReconhecimentoArgsFromReconhecimentoRecursive3(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive4'


class ReconhecimentoArgsFromReconhecimentoRecursive4(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    
    

class FindManyReconhecimentoArgsFromReconhecimento(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive1'


class FindManyReconhecimentoArgsFromReconhecimentoRecursive1(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive2'


class FindManyReconhecimentoArgsFromReconhecimentoRecursive2(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive3'


class FindManyReconhecimentoArgsFromReconhecimentoRecursive3(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive4'


class FindManyReconhecimentoArgsFromReconhecimentoRecursive4(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    
    

class SequelizeMetaIncludeFromReconhecimento(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""


class SequelizeMetaIncludeFromReconhecimentoRecursive1(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""


class SequelizeMetaIncludeFromReconhecimentoRecursive2(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""


class SequelizeMetaIncludeFromReconhecimentoRecursive3(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""


class SequelizeMetaIncludeFromReconhecimentoRecursive4(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""

    

class SequelizeMetaArgsFromReconhecimento(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive1'


class SequelizeMetaArgsFromReconhecimentoRecursive1(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive2'


class SequelizeMetaArgsFromReconhecimentoRecursive2(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive3'


class SequelizeMetaArgsFromReconhecimentoRecursive3(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive4'


class SequelizeMetaArgsFromReconhecimentoRecursive4(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    
    

class FindManySequelizeMetaArgsFromReconhecimento(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive1'


class FindManySequelizeMetaArgsFromReconhecimentoRecursive1(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive2'


class FindManySequelizeMetaArgsFromReconhecimentoRecursive2(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive3'


class FindManySequelizeMetaArgsFromReconhecimentoRecursive3(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive4'


class FindManySequelizeMetaArgsFromReconhecimentoRecursive4(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    
    

class UsersIncludeFromReconhecimento(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromReconhecimentoRecursive1']


class UsersIncludeFromReconhecimentoRecursive1(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromReconhecimentoRecursive2']


class UsersIncludeFromReconhecimentoRecursive2(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromReconhecimentoRecursive3']


class UsersIncludeFromReconhecimentoRecursive3(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromReconhecimentoRecursive4']


class UsersIncludeFromReconhecimentoRecursive4(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""

    

class UsersArgsFromReconhecimento(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromReconhecimentoRecursive1(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromReconhecimentoRecursive2(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromReconhecimentoRecursive3(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromReconhecimentoRecursive4(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    
    

class FindManyUsersArgsFromReconhecimento(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromReconhecimentoRecursive1(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromReconhecimentoRecursive2(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromReconhecimentoRecursive3(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromReconhecimentoRecursive4(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class VigilantesIncludeFromReconhecimento(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Users: Union[bool, 'UsersArgsFromReconhecimentoRecursive1']


class VigilantesIncludeFromReconhecimentoRecursive1(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Users: Union[bool, 'UsersArgsFromReconhecimentoRecursive2']


class VigilantesIncludeFromReconhecimentoRecursive2(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Users: Union[bool, 'UsersArgsFromReconhecimentoRecursive3']


class VigilantesIncludeFromReconhecimentoRecursive3(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""
    Users: Union[bool, 'UsersArgsFromReconhecimentoRecursive4']


class VigilantesIncludeFromReconhecimentoRecursive4(TypedDict, total=False):
    """Relational arguments for Reconhecimento"""

    

class VigilantesArgsFromReconhecimento(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'VigilantesIncludeFromVigilantesRecursive1'


class VigilantesArgsFromReconhecimentoRecursive1(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'VigilantesIncludeFromVigilantesRecursive2'


class VigilantesArgsFromReconhecimentoRecursive2(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'VigilantesIncludeFromVigilantesRecursive3'


class VigilantesArgsFromReconhecimentoRecursive3(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    include: 'VigilantesIncludeFromVigilantesRecursive4'


class VigilantesArgsFromReconhecimentoRecursive4(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    
    

class FindManyVigilantesArgsFromReconhecimento(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive1'


class FindManyVigilantesArgsFromReconhecimentoRecursive1(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive2'


class FindManyVigilantesArgsFromReconhecimentoRecursive2(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive3'


class FindManyVigilantesArgsFromReconhecimentoRecursive3(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive4'


class FindManyVigilantesArgsFromReconhecimentoRecursive4(TypedDict, total=False):
    """Arguments for Reconhecimento"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    


FindManyReconhecimentoArgs = FindManyReconhecimentoArgsFromReconhecimento
FindFirstReconhecimentoArgs = FindManyReconhecimentoArgsFromReconhecimento


    

class ReconhecimentoWhereInput(TypedDict, total=False):
    """Reconhecimento arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    alunoId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos: 'AlunosRelationFilter'

    # should be noted that AND and NOT should be Union['ReconhecimentoWhereInputRecursive1', List['ReconhecimentoWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ReconhecimentoWhereInputRecursive1']
    OR: List['ReconhecimentoWhereInputRecursive1']
    NOT: List['ReconhecimentoWhereInputRecursive1']


class ReconhecimentoWhereInputRecursive1(TypedDict, total=False):
    """Reconhecimento arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    alunoId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos: 'AlunosRelationFilter'

    # should be noted that AND and NOT should be Union['ReconhecimentoWhereInputRecursive2', List['ReconhecimentoWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ReconhecimentoWhereInputRecursive2']
    OR: List['ReconhecimentoWhereInputRecursive2']
    NOT: List['ReconhecimentoWhereInputRecursive2']


class ReconhecimentoWhereInputRecursive2(TypedDict, total=False):
    """Reconhecimento arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    alunoId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos: 'AlunosRelationFilter'

    # should be noted that AND and NOT should be Union['ReconhecimentoWhereInputRecursive3', List['ReconhecimentoWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ReconhecimentoWhereInputRecursive3']
    OR: List['ReconhecimentoWhereInputRecursive3']
    NOT: List['ReconhecimentoWhereInputRecursive3']


class ReconhecimentoWhereInputRecursive3(TypedDict, total=False):
    """Reconhecimento arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    alunoId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos: 'AlunosRelationFilter'

    # should be noted that AND and NOT should be Union['ReconhecimentoWhereInputRecursive4', List['ReconhecimentoWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ReconhecimentoWhereInputRecursive4']
    OR: List['ReconhecimentoWhereInputRecursive4']
    NOT: List['ReconhecimentoWhereInputRecursive4']


class ReconhecimentoWhereInputRecursive4(TypedDict, total=False):
    """Reconhecimento arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    alunoId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Alunos: 'AlunosRelationFilter'



# aggregate Reconhecimento types


    

class ReconhecimentoScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Reconhecimento arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    alunoId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ReconhecimentoScalarWhereWithAggregatesInputRecursive1']
    OR: List['ReconhecimentoScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ReconhecimentoScalarWhereWithAggregatesInputRecursive1']


class ReconhecimentoScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Reconhecimento arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    alunoId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ReconhecimentoScalarWhereWithAggregatesInputRecursive2']
    OR: List['ReconhecimentoScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ReconhecimentoScalarWhereWithAggregatesInputRecursive2']


class ReconhecimentoScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Reconhecimento arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    alunoId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ReconhecimentoScalarWhereWithAggregatesInputRecursive3']
    OR: List['ReconhecimentoScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ReconhecimentoScalarWhereWithAggregatesInputRecursive3']


class ReconhecimentoScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Reconhecimento arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    alunoId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ReconhecimentoScalarWhereWithAggregatesInputRecursive4']
    OR: List['ReconhecimentoScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ReconhecimentoScalarWhereWithAggregatesInputRecursive4']


class ReconhecimentoScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Reconhecimento arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    alunoId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ReconhecimentoGroupByOutput(TypedDict, total=False):
    id: _int
    alunoId: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'ReconhecimentoSumAggregateOutput'
    _avg: 'ReconhecimentoAvgAggregateOutput'
    _min: 'ReconhecimentoMinAggregateOutput'
    _max: 'ReconhecimentoMaxAggregateOutput'
    _count: 'ReconhecimentoCountAggregateOutput'


class ReconhecimentoAvgAggregateOutput(TypedDict, total=False):
    """Reconhecimento output for aggregating averages"""
    id: float
    alunoId: float


class ReconhecimentoSumAggregateOutput(TypedDict, total=False):
    """Reconhecimento output for aggregating sums"""
    id: _int
    alunoId: _int


class ReconhecimentoScalarAggregateOutput(TypedDict, total=False):
    """Reconhecimento output including scalar fields"""
    id: _int
    alunoId: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


ReconhecimentoMinAggregateOutput = ReconhecimentoScalarAggregateOutput
ReconhecimentoMaxAggregateOutput = ReconhecimentoScalarAggregateOutput


class ReconhecimentoMaxAggregateInput(TypedDict, total=False):
    """Reconhecimento input for aggregating by max"""
    id: bool
    alunoId: bool
    createdAt: bool
    updatedAt: bool


class ReconhecimentoMinAggregateInput(TypedDict, total=False):
    """Reconhecimento input for aggregating by min"""
    id: bool
    alunoId: bool
    createdAt: bool
    updatedAt: bool


class ReconhecimentoNumberAggregateInput(TypedDict, total=False):
    """Reconhecimento input for aggregating numbers"""
    id: bool
    alunoId: bool


ReconhecimentoAvgAggregateInput = ReconhecimentoNumberAggregateInput
ReconhecimentoSumAggregateInput = ReconhecimentoNumberAggregateInput


ReconhecimentoCountAggregateInput = TypedDict(
    'ReconhecimentoCountAggregateInput',
    {
        'id': bool,
        'alunoId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

ReconhecimentoCountAggregateOutput = TypedDict(
    'ReconhecimentoCountAggregateOutput',
    {
        'id': int,
        'alunoId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


ReconhecimentoKeys = Literal[
    'id',
    'alunoId',
    'createdAt',
    'updatedAt',
    'Alunos',
]
ReconhecimentoScalarFieldKeys = Literal[
    'id',
    'alunoId',
    'createdAt',
    'updatedAt',
]
ReconhecimentoScalarFieldKeysT = TypeVar('ReconhecimentoScalarFieldKeysT', bound=ReconhecimentoScalarFieldKeys)

ReconhecimentoRelationalFieldKeys = Literal[
        'Alunos',
    ]

# SequelizeMeta types

class SequelizeMetaOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the SequelizeMeta create method"""


class SequelizeMetaCreateInput(SequelizeMetaOptionalCreateInput):
    """Required arguments to the SequelizeMeta create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SequelizeMetaOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the SequelizeMeta create method, without relations"""


class SequelizeMetaCreateWithoutRelationsInput(SequelizeMetaOptionalCreateWithoutRelationsInput):
    """Required arguments to the SequelizeMeta create method, without relations"""
    name: _str

class SequelizeMetaConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'SequelizeMetaCreateWithoutRelationsInput'
    where: 'SequelizeMetaWhereUniqueInput'

class SequelizeMetaCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SequelizeMetaCreateWithoutRelationsInput'
    connect: 'SequelizeMetaWhereUniqueInput'
    connect_or_create: 'SequelizeMetaConnectOrCreateWithoutRelationsInput'


class SequelizeMetaCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SequelizeMetaCreateWithoutRelationsInput', List['SequelizeMetaCreateWithoutRelationsInput']]
    connect: Union['SequelizeMetaWhereUniqueInput', List['SequelizeMetaWhereUniqueInput']]
    connect_or_create: Union['SequelizeMetaConnectOrCreateWithoutRelationsInput', List['SequelizeMetaConnectOrCreateWithoutRelationsInput']]

_SequelizeMetaWhereUnique_name_Input = TypedDict(
    '_SequelizeMetaWhereUnique_name_Input',
    {
        'name': '_str',
    },
    total=True
)

SequelizeMetaWhereUniqueInput = _SequelizeMetaWhereUnique_name_Input


class SequelizeMetaUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    name: _str


class SequelizeMetaUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    name: _str


class SequelizeMetaUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SequelizeMetaCreateWithoutRelationsInput']
    connect: List['SequelizeMetaWhereUniqueInput']
    connect_or_create: List['SequelizeMetaConnectOrCreateWithoutRelationsInput']
    set: List['SequelizeMetaWhereUniqueInput']
    disconnect: List['SequelizeMetaWhereUniqueInput']
    delete: List['SequelizeMetaWhereUniqueInput']

    # TODO
    # update: List['SequelizeMetaUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SequelizeMetaUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SequelizeMetaScalarWhereInput']
    # upsert: List['SequelizeMetaUpserteWithWhereUniqueWithoutRelationsInput']


class SequelizeMetaUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SequelizeMetaCreateWithoutRelationsInput'
    connect: 'SequelizeMetaWhereUniqueInput'
    connect_or_create: 'SequelizeMetaConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SequelizeMetaUpdateInput'
    # upsert: 'SequelizeMetaUpsertWithoutRelationsInput'


class SequelizeMetaUpsertInput(TypedDict):
    create: 'SequelizeMetaCreateInput'
    update: 'SequelizeMetaUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_SequelizeMeta_name_OrderByInput = TypedDict(
    '_SequelizeMeta_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_SequelizeMeta_RelevanceInner = TypedDict(
    '_SequelizeMeta_RelevanceInner',
    {
        'fields': 'List[SequelizeMetaScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_SequelizeMeta_RelevanceOrderByInput = TypedDict(
    '_SequelizeMeta_RelevanceOrderByInput',
    {
        '_relevance': '_SequelizeMeta_RelevanceInner',
    },
    total=True
)

SequelizeMetaOrderByInput = Union[
    '_SequelizeMeta_name_OrderByInput',
    '_SequelizeMeta_RelevanceOrderByInput',
]



# recursive SequelizeMeta types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SequelizeMetaRelationFilter = TypedDict(
    'SequelizeMetaRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SequelizeMetaListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SequelizeMetaInclude(TypedDict, total=False):
    """SequelizeMeta relational arguments"""


    

class AlunosIncludeFromSequelizeMeta(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromSequelizeMetaRecursive1']
    Fotos: Union[bool, 'FindManyFotosArgsFromSequelizeMetaRecursive1']
    Historico: Union[bool, 'FindManyHistoricoArgsFromSequelizeMetaRecursive1']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromSequelizeMetaRecursive1']


class AlunosIncludeFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromSequelizeMetaRecursive2']
    Fotos: Union[bool, 'FindManyFotosArgsFromSequelizeMetaRecursive2']
    Historico: Union[bool, 'FindManyHistoricoArgsFromSequelizeMetaRecursive2']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromSequelizeMetaRecursive2']


class AlunosIncludeFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromSequelizeMetaRecursive3']
    Fotos: Union[bool, 'FindManyFotosArgsFromSequelizeMetaRecursive3']
    Historico: Union[bool, 'FindManyHistoricoArgsFromSequelizeMetaRecursive3']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromSequelizeMetaRecursive3']


class AlunosIncludeFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromSequelizeMetaRecursive4']
    Fotos: Union[bool, 'FindManyFotosArgsFromSequelizeMetaRecursive4']
    Historico: Union[bool, 'FindManyHistoricoArgsFromSequelizeMetaRecursive4']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromSequelizeMetaRecursive4']


class AlunosIncludeFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""

    

class AlunosArgsFromSequelizeMeta(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'AlunosIncludeFromAlunosRecursive1'


class AlunosArgsFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'AlunosIncludeFromAlunosRecursive2'


class AlunosArgsFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'AlunosIncludeFromAlunosRecursive3'


class AlunosArgsFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'AlunosIncludeFromAlunosRecursive4'


class AlunosArgsFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    
    

class FindManyAlunosArgsFromSequelizeMeta(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive1'


class FindManyAlunosArgsFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive2'


class FindManyAlunosArgsFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive3'


class FindManyAlunosArgsFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive4'


class FindManyAlunosArgsFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    
    

class Alunos_propinaIncludeFromSequelizeMeta(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos: Union[bool, 'AlunosArgsFromSequelizeMetaRecursive1']
    Propinas: Union[bool, 'PropinasArgsFromSequelizeMetaRecursive1']


class Alunos_propinaIncludeFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos: Union[bool, 'AlunosArgsFromSequelizeMetaRecursive2']
    Propinas: Union[bool, 'PropinasArgsFromSequelizeMetaRecursive2']


class Alunos_propinaIncludeFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos: Union[bool, 'AlunosArgsFromSequelizeMetaRecursive3']
    Propinas: Union[bool, 'PropinasArgsFromSequelizeMetaRecursive3']


class Alunos_propinaIncludeFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos: Union[bool, 'AlunosArgsFromSequelizeMetaRecursive4']
    Propinas: Union[bool, 'PropinasArgsFromSequelizeMetaRecursive4']


class Alunos_propinaIncludeFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""

    

class Alunos_propinaArgsFromSequelizeMeta(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive1'


class Alunos_propinaArgsFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive2'


class Alunos_propinaArgsFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive3'


class Alunos_propinaArgsFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive4'


class Alunos_propinaArgsFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    
    

class FindManyAlunos_propinaArgsFromSequelizeMeta(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive1'


class FindManyAlunos_propinaArgsFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive2'


class FindManyAlunos_propinaArgsFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive3'


class FindManyAlunos_propinaArgsFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive4'


class FindManyAlunos_propinaArgsFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    
    

class FotosIncludeFromSequelizeMeta(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos: Union[bool, 'AlunosArgsFromSequelizeMetaRecursive1']


class FotosIncludeFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos: Union[bool, 'AlunosArgsFromSequelizeMetaRecursive2']


class FotosIncludeFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos: Union[bool, 'AlunosArgsFromSequelizeMetaRecursive3']


class FotosIncludeFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos: Union[bool, 'AlunosArgsFromSequelizeMetaRecursive4']


class FotosIncludeFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""

    

class FotosArgsFromSequelizeMeta(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'FotosIncludeFromFotosRecursive1'


class FotosArgsFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'FotosIncludeFromFotosRecursive2'


class FotosArgsFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'FotosIncludeFromFotosRecursive3'


class FotosArgsFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'FotosIncludeFromFotosRecursive4'


class FotosArgsFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    
    

class FindManyFotosArgsFromSequelizeMeta(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive1'


class FindManyFotosArgsFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive2'


class FindManyFotosArgsFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive3'


class FindManyFotosArgsFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive4'


class FindManyFotosArgsFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    
    

class HistoricoIncludeFromSequelizeMeta(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos: Union[bool, 'AlunosArgsFromSequelizeMetaRecursive1']
    Propinas: Union[bool, 'PropinasArgsFromSequelizeMetaRecursive1']


class HistoricoIncludeFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos: Union[bool, 'AlunosArgsFromSequelizeMetaRecursive2']
    Propinas: Union[bool, 'PropinasArgsFromSequelizeMetaRecursive2']


class HistoricoIncludeFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos: Union[bool, 'AlunosArgsFromSequelizeMetaRecursive3']
    Propinas: Union[bool, 'PropinasArgsFromSequelizeMetaRecursive3']


class HistoricoIncludeFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos: Union[bool, 'AlunosArgsFromSequelizeMetaRecursive4']
    Propinas: Union[bool, 'PropinasArgsFromSequelizeMetaRecursive4']


class HistoricoIncludeFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""

    

class HistoricoArgsFromSequelizeMeta(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'HistoricoIncludeFromHistoricoRecursive1'


class HistoricoArgsFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'HistoricoIncludeFromHistoricoRecursive2'


class HistoricoArgsFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'HistoricoIncludeFromHistoricoRecursive3'


class HistoricoArgsFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'HistoricoIncludeFromHistoricoRecursive4'


class HistoricoArgsFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    
    

class FindManyHistoricoArgsFromSequelizeMeta(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive1'


class FindManyHistoricoArgsFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive2'


class FindManyHistoricoArgsFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive3'


class FindManyHistoricoArgsFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive4'


class FindManyHistoricoArgsFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    
    

class PropinasIncludeFromSequelizeMeta(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromSequelizeMetaRecursive1']
    Historico: Union[bool, 'FindManyHistoricoArgsFromSequelizeMetaRecursive1']


class PropinasIncludeFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromSequelizeMetaRecursive2']
    Historico: Union[bool, 'FindManyHistoricoArgsFromSequelizeMetaRecursive2']


class PropinasIncludeFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromSequelizeMetaRecursive3']
    Historico: Union[bool, 'FindManyHistoricoArgsFromSequelizeMetaRecursive3']


class PropinasIncludeFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromSequelizeMetaRecursive4']
    Historico: Union[bool, 'FindManyHistoricoArgsFromSequelizeMetaRecursive4']


class PropinasIncludeFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""

    

class PropinasArgsFromSequelizeMeta(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'PropinasIncludeFromPropinasRecursive1'


class PropinasArgsFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'PropinasIncludeFromPropinasRecursive2'


class PropinasArgsFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'PropinasIncludeFromPropinasRecursive3'


class PropinasArgsFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'PropinasIncludeFromPropinasRecursive4'


class PropinasArgsFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    
    

class FindManyPropinasArgsFromSequelizeMeta(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive1'


class FindManyPropinasArgsFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive2'


class FindManyPropinasArgsFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive3'


class FindManyPropinasArgsFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive4'


class FindManyPropinasArgsFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    
    

class ReconhecimentoIncludeFromSequelizeMeta(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos: Union[bool, 'AlunosArgsFromSequelizeMetaRecursive1']


class ReconhecimentoIncludeFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos: Union[bool, 'AlunosArgsFromSequelizeMetaRecursive2']


class ReconhecimentoIncludeFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos: Union[bool, 'AlunosArgsFromSequelizeMetaRecursive3']


class ReconhecimentoIncludeFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Alunos: Union[bool, 'AlunosArgsFromSequelizeMetaRecursive4']


class ReconhecimentoIncludeFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""

    

class ReconhecimentoArgsFromSequelizeMeta(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive1'


class ReconhecimentoArgsFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive2'


class ReconhecimentoArgsFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive3'


class ReconhecimentoArgsFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive4'


class ReconhecimentoArgsFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    
    

class FindManyReconhecimentoArgsFromSequelizeMeta(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive1'


class FindManyReconhecimentoArgsFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive2'


class FindManyReconhecimentoArgsFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive3'


class FindManyReconhecimentoArgsFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive4'


class FindManyReconhecimentoArgsFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    
    

class SequelizeMetaIncludeFromSequelizeMeta(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""


class SequelizeMetaIncludeFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""


class SequelizeMetaIncludeFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""


class SequelizeMetaIncludeFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""


class SequelizeMetaIncludeFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""

    

class SequelizeMetaArgsFromSequelizeMeta(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive1'


class SequelizeMetaArgsFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive2'


class SequelizeMetaArgsFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive3'


class SequelizeMetaArgsFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive4'


class SequelizeMetaArgsFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    
    

class FindManySequelizeMetaArgsFromSequelizeMeta(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive1'


class FindManySequelizeMetaArgsFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive2'


class FindManySequelizeMetaArgsFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive3'


class FindManySequelizeMetaArgsFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive4'


class FindManySequelizeMetaArgsFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    
    

class UsersIncludeFromSequelizeMeta(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromSequelizeMetaRecursive1']


class UsersIncludeFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromSequelizeMetaRecursive2']


class UsersIncludeFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromSequelizeMetaRecursive3']


class UsersIncludeFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromSequelizeMetaRecursive4']


class UsersIncludeFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""

    

class UsersArgsFromSequelizeMeta(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    
    

class FindManyUsersArgsFromSequelizeMeta(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class VigilantesIncludeFromSequelizeMeta(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Users: Union[bool, 'UsersArgsFromSequelizeMetaRecursive1']


class VigilantesIncludeFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Users: Union[bool, 'UsersArgsFromSequelizeMetaRecursive2']


class VigilantesIncludeFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Users: Union[bool, 'UsersArgsFromSequelizeMetaRecursive3']


class VigilantesIncludeFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""
    Users: Union[bool, 'UsersArgsFromSequelizeMetaRecursive4']


class VigilantesIncludeFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Relational arguments for SequelizeMeta"""

    

class VigilantesArgsFromSequelizeMeta(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'VigilantesIncludeFromVigilantesRecursive1'


class VigilantesArgsFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'VigilantesIncludeFromVigilantesRecursive2'


class VigilantesArgsFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'VigilantesIncludeFromVigilantesRecursive3'


class VigilantesArgsFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    include: 'VigilantesIncludeFromVigilantesRecursive4'


class VigilantesArgsFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    
    

class FindManyVigilantesArgsFromSequelizeMeta(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive1'


class FindManyVigilantesArgsFromSequelizeMetaRecursive1(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive2'


class FindManyVigilantesArgsFromSequelizeMetaRecursive2(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive3'


class FindManyVigilantesArgsFromSequelizeMetaRecursive3(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive4'


class FindManyVigilantesArgsFromSequelizeMetaRecursive4(TypedDict, total=False):
    """Arguments for SequelizeMeta"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    


FindManySequelizeMetaArgs = FindManySequelizeMetaArgsFromSequelizeMeta
FindFirstSequelizeMetaArgs = FindManySequelizeMetaArgsFromSequelizeMeta


    

class SequelizeMetaWhereInput(TypedDict, total=False):
    """SequelizeMeta arguments for searching"""
    name: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['SequelizeMetaWhereInputRecursive1', List['SequelizeMetaWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SequelizeMetaWhereInputRecursive1']
    OR: List['SequelizeMetaWhereInputRecursive1']
    NOT: List['SequelizeMetaWhereInputRecursive1']


class SequelizeMetaWhereInputRecursive1(TypedDict, total=False):
    """SequelizeMeta arguments for searching"""
    name: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['SequelizeMetaWhereInputRecursive2', List['SequelizeMetaWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SequelizeMetaWhereInputRecursive2']
    OR: List['SequelizeMetaWhereInputRecursive2']
    NOT: List['SequelizeMetaWhereInputRecursive2']


class SequelizeMetaWhereInputRecursive2(TypedDict, total=False):
    """SequelizeMeta arguments for searching"""
    name: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['SequelizeMetaWhereInputRecursive3', List['SequelizeMetaWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SequelizeMetaWhereInputRecursive3']
    OR: List['SequelizeMetaWhereInputRecursive3']
    NOT: List['SequelizeMetaWhereInputRecursive3']


class SequelizeMetaWhereInputRecursive3(TypedDict, total=False):
    """SequelizeMeta arguments for searching"""
    name: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['SequelizeMetaWhereInputRecursive4', List['SequelizeMetaWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SequelizeMetaWhereInputRecursive4']
    OR: List['SequelizeMetaWhereInputRecursive4']
    NOT: List['SequelizeMetaWhereInputRecursive4']


class SequelizeMetaWhereInputRecursive4(TypedDict, total=False):
    """SequelizeMeta arguments for searching"""
    name: Union[_str, 'types.StringFilter']



# aggregate SequelizeMeta types


    

class SequelizeMetaScalarWhereWithAggregatesInput(TypedDict, total=False):
    """SequelizeMeta arguments for searching"""
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SequelizeMetaScalarWhereWithAggregatesInputRecursive1']
    OR: List['SequelizeMetaScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SequelizeMetaScalarWhereWithAggregatesInputRecursive1']


class SequelizeMetaScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """SequelizeMeta arguments for searching"""
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SequelizeMetaScalarWhereWithAggregatesInputRecursive2']
    OR: List['SequelizeMetaScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SequelizeMetaScalarWhereWithAggregatesInputRecursive2']


class SequelizeMetaScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """SequelizeMeta arguments for searching"""
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SequelizeMetaScalarWhereWithAggregatesInputRecursive3']
    OR: List['SequelizeMetaScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SequelizeMetaScalarWhereWithAggregatesInputRecursive3']


class SequelizeMetaScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """SequelizeMeta arguments for searching"""
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SequelizeMetaScalarWhereWithAggregatesInputRecursive4']
    OR: List['SequelizeMetaScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SequelizeMetaScalarWhereWithAggregatesInputRecursive4']


class SequelizeMetaScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """SequelizeMeta arguments for searching"""
    name: Union[_str, 'types.StringWithAggregatesFilter']



class SequelizeMetaGroupByOutput(TypedDict, total=False):
    name: _str
    _sum: 'SequelizeMetaSumAggregateOutput'
    _avg: 'SequelizeMetaAvgAggregateOutput'
    _min: 'SequelizeMetaMinAggregateOutput'
    _max: 'SequelizeMetaMaxAggregateOutput'
    _count: 'SequelizeMetaCountAggregateOutput'


class SequelizeMetaAvgAggregateOutput(TypedDict, total=False):
    """SequelizeMeta output for aggregating averages"""


class SequelizeMetaSumAggregateOutput(TypedDict, total=False):
    """SequelizeMeta output for aggregating sums"""


class SequelizeMetaScalarAggregateOutput(TypedDict, total=False):
    """SequelizeMeta output including scalar fields"""
    name: _str


SequelizeMetaMinAggregateOutput = SequelizeMetaScalarAggregateOutput
SequelizeMetaMaxAggregateOutput = SequelizeMetaScalarAggregateOutput


class SequelizeMetaMaxAggregateInput(TypedDict, total=False):
    """SequelizeMeta input for aggregating by max"""
    name: bool


class SequelizeMetaMinAggregateInput(TypedDict, total=False):
    """SequelizeMeta input for aggregating by min"""
    name: bool


class SequelizeMetaNumberAggregateInput(TypedDict, total=False):
    """SequelizeMeta input for aggregating numbers"""


SequelizeMetaAvgAggregateInput = SequelizeMetaNumberAggregateInput
SequelizeMetaSumAggregateInput = SequelizeMetaNumberAggregateInput


SequelizeMetaCountAggregateInput = TypedDict(
    'SequelizeMetaCountAggregateInput',
    {
        'name': bool,
        '_all': bool,
    },
    total=False,
)

SequelizeMetaCountAggregateOutput = TypedDict(
    'SequelizeMetaCountAggregateOutput',
    {
        'name': int,
        '_all': int,
    },
    total=False,
)


SequelizeMetaKeys = Literal[
    'name',
]
SequelizeMetaScalarFieldKeys = Literal[
    'name',
]
SequelizeMetaScalarFieldKeysT = TypeVar('SequelizeMetaScalarFieldKeysT', bound=SequelizeMetaScalarFieldKeys)

SequelizeMetaRelationalFieldKeys = _NoneType

# Users types

class UsersOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Users create method"""
    id: _int
    nome_completo: Optional[_str]
    email: Optional[_str]
    pin_acesso: Optional[_str]
    telefone: Optional[_str]
    type: Optional['enums.enum_Users_type']
    bi: Optional[_str]
    Vigilantes: 'VigilantesCreateManyNestedWithoutRelationsInput'


class UsersCreateInput(UsersOptionalCreateInput):
    """Required arguments to the Users create method"""
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UsersOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Users create method, without relations"""
    id: _int
    nome_completo: Optional[_str]
    email: Optional[_str]
    pin_acesso: Optional[_str]
    telefone: Optional[_str]
    type: Optional['enums.enum_Users_type']
    bi: Optional[_str]


class UsersCreateWithoutRelationsInput(UsersOptionalCreateWithoutRelationsInput):
    """Required arguments to the Users create method, without relations"""
    createdAt: datetime.datetime
    updatedAt: datetime.datetime

class UsersConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UsersCreateWithoutRelationsInput'
    where: 'UsersWhereUniqueInput'

class UsersCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UsersCreateWithoutRelationsInput'
    connect: 'UsersWhereUniqueInput'
    connect_or_create: 'UsersConnectOrCreateWithoutRelationsInput'


class UsersCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UsersCreateWithoutRelationsInput', List['UsersCreateWithoutRelationsInput']]
    connect: Union['UsersWhereUniqueInput', List['UsersWhereUniqueInput']]
    connect_or_create: Union['UsersConnectOrCreateWithoutRelationsInput', List['UsersConnectOrCreateWithoutRelationsInput']]

_UsersWhereUnique_id_Input = TypedDict(
    '_UsersWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

UsersWhereUniqueInput = _UsersWhereUnique_id_Input


class UsersUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    nome_completo: Optional[_str]
    email: Optional[_str]
    pin_acesso: Optional[_str]
    telefone: Optional[_str]
    type: Optional['enums.enum_Users_type']
    bi: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    Vigilantes: 'VigilantesUpdateManyWithoutRelationsInput'


class UsersUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    nome_completo: Optional[_str]
    email: Optional[_str]
    pin_acesso: Optional[_str]
    telefone: Optional[_str]
    type: Optional['enums.enum_Users_type']
    bi: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UsersUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UsersCreateWithoutRelationsInput']
    connect: List['UsersWhereUniqueInput']
    connect_or_create: List['UsersConnectOrCreateWithoutRelationsInput']
    set: List['UsersWhereUniqueInput']
    disconnect: List['UsersWhereUniqueInput']
    delete: List['UsersWhereUniqueInput']

    # TODO
    # update: List['UsersUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UsersUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UsersScalarWhereInput']
    # upsert: List['UsersUpserteWithWhereUniqueWithoutRelationsInput']


class UsersUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UsersCreateWithoutRelationsInput'
    connect: 'UsersWhereUniqueInput'
    connect_or_create: 'UsersConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UsersUpdateInput'
    # upsert: 'UsersUpsertWithoutRelationsInput'


class UsersUpsertInput(TypedDict):
    create: 'UsersCreateInput'
    update: 'UsersUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Users_id_OrderByInput = TypedDict(
    '_Users_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Users_nome_completo_OrderByInput = TypedDict(
    '_Users_nome_completo_OrderByInput',
    {
        'nome_completo': 'SortOrder',
    },
    total=True
)

_Users_email_OrderByInput = TypedDict(
    '_Users_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_Users_pin_acesso_OrderByInput = TypedDict(
    '_Users_pin_acesso_OrderByInput',
    {
        'pin_acesso': 'SortOrder',
    },
    total=True
)

_Users_telefone_OrderByInput = TypedDict(
    '_Users_telefone_OrderByInput',
    {
        'telefone': 'SortOrder',
    },
    total=True
)

_Users_type_OrderByInput = TypedDict(
    '_Users_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_Users_bi_OrderByInput = TypedDict(
    '_Users_bi_OrderByInput',
    {
        'bi': 'SortOrder',
    },
    total=True
)

_Users_createdAt_OrderByInput = TypedDict(
    '_Users_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Users_updatedAt_OrderByInput = TypedDict(
    '_Users_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Users_RelevanceInner = TypedDict(
    '_Users_RelevanceInner',
    {
        'fields': 'List[UsersScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Users_RelevanceOrderByInput = TypedDict(
    '_Users_RelevanceOrderByInput',
    {
        '_relevance': '_Users_RelevanceInner',
    },
    total=True
)

UsersOrderByInput = Union[
    '_Users_id_OrderByInput',
    '_Users_nome_completo_OrderByInput',
    '_Users_email_OrderByInput',
    '_Users_pin_acesso_OrderByInput',
    '_Users_telefone_OrderByInput',
    '_Users_type_OrderByInput',
    '_Users_bi_OrderByInput',
    '_Users_createdAt_OrderByInput',
    '_Users_updatedAt_OrderByInput',
    '_Users_RelevanceOrderByInput',
]



# recursive Users types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UsersRelationFilter = TypedDict(
    'UsersRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UsersListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UsersInclude(TypedDict, total=False):
    """Users relational arguments"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromUsers']


    

class AlunosIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromUsersRecursive1']
    Fotos: Union[bool, 'FindManyFotosArgsFromUsersRecursive1']
    Historico: Union[bool, 'FindManyHistoricoArgsFromUsersRecursive1']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromUsersRecursive1']


class AlunosIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromUsersRecursive2']
    Fotos: Union[bool, 'FindManyFotosArgsFromUsersRecursive2']
    Historico: Union[bool, 'FindManyHistoricoArgsFromUsersRecursive2']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromUsersRecursive2']


class AlunosIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromUsersRecursive3']
    Fotos: Union[bool, 'FindManyFotosArgsFromUsersRecursive3']
    Historico: Union[bool, 'FindManyHistoricoArgsFromUsersRecursive3']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromUsersRecursive3']


class AlunosIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromUsersRecursive4']
    Fotos: Union[bool, 'FindManyFotosArgsFromUsersRecursive4']
    Historico: Union[bool, 'FindManyHistoricoArgsFromUsersRecursive4']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromUsersRecursive4']


class AlunosIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class AlunosArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'AlunosIncludeFromAlunosRecursive1'


class AlunosArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'AlunosIncludeFromAlunosRecursive2'


class AlunosArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'AlunosIncludeFromAlunosRecursive3'


class AlunosArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'AlunosIncludeFromAlunosRecursive4'


class AlunosArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyAlunosArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive1'


class FindManyAlunosArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive2'


class FindManyAlunosArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive3'


class FindManyAlunosArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive4'


class FindManyAlunosArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    
    

class Alunos_propinaIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos: Union[bool, 'AlunosArgsFromUsersRecursive1']
    Propinas: Union[bool, 'PropinasArgsFromUsersRecursive1']


class Alunos_propinaIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos: Union[bool, 'AlunosArgsFromUsersRecursive2']
    Propinas: Union[bool, 'PropinasArgsFromUsersRecursive2']


class Alunos_propinaIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos: Union[bool, 'AlunosArgsFromUsersRecursive3']
    Propinas: Union[bool, 'PropinasArgsFromUsersRecursive3']


class Alunos_propinaIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos: Union[bool, 'AlunosArgsFromUsersRecursive4']
    Propinas: Union[bool, 'PropinasArgsFromUsersRecursive4']


class Alunos_propinaIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class Alunos_propinaArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive1'


class Alunos_propinaArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive2'


class Alunos_propinaArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive3'


class Alunos_propinaArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive4'


class Alunos_propinaArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyAlunos_propinaArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive1'


class FindManyAlunos_propinaArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive2'


class FindManyAlunos_propinaArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive3'


class FindManyAlunos_propinaArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive4'


class FindManyAlunos_propinaArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    
    

class FotosIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos: Union[bool, 'AlunosArgsFromUsersRecursive1']


class FotosIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos: Union[bool, 'AlunosArgsFromUsersRecursive2']


class FotosIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos: Union[bool, 'AlunosArgsFromUsersRecursive3']


class FotosIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos: Union[bool, 'AlunosArgsFromUsersRecursive4']


class FotosIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class FotosArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'FotosIncludeFromFotosRecursive1'


class FotosArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'FotosIncludeFromFotosRecursive2'


class FotosArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'FotosIncludeFromFotosRecursive3'


class FotosArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'FotosIncludeFromFotosRecursive4'


class FotosArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyFotosArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive1'


class FindManyFotosArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive2'


class FindManyFotosArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive3'


class FindManyFotosArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive4'


class FindManyFotosArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    
    

class HistoricoIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos: Union[bool, 'AlunosArgsFromUsersRecursive1']
    Propinas: Union[bool, 'PropinasArgsFromUsersRecursive1']


class HistoricoIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos: Union[bool, 'AlunosArgsFromUsersRecursive2']
    Propinas: Union[bool, 'PropinasArgsFromUsersRecursive2']


class HistoricoIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos: Union[bool, 'AlunosArgsFromUsersRecursive3']
    Propinas: Union[bool, 'PropinasArgsFromUsersRecursive3']


class HistoricoIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos: Union[bool, 'AlunosArgsFromUsersRecursive4']
    Propinas: Union[bool, 'PropinasArgsFromUsersRecursive4']


class HistoricoIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class HistoricoArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'HistoricoIncludeFromHistoricoRecursive1'


class HistoricoArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'HistoricoIncludeFromHistoricoRecursive2'


class HistoricoArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'HistoricoIncludeFromHistoricoRecursive3'


class HistoricoArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'HistoricoIncludeFromHistoricoRecursive4'


class HistoricoArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyHistoricoArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive1'


class FindManyHistoricoArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive2'


class FindManyHistoricoArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive3'


class FindManyHistoricoArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive4'


class FindManyHistoricoArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    
    

class PropinasIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromUsersRecursive1']
    Historico: Union[bool, 'FindManyHistoricoArgsFromUsersRecursive1']


class PropinasIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromUsersRecursive2']
    Historico: Union[bool, 'FindManyHistoricoArgsFromUsersRecursive2']


class PropinasIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromUsersRecursive3']
    Historico: Union[bool, 'FindManyHistoricoArgsFromUsersRecursive3']


class PropinasIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromUsersRecursive4']
    Historico: Union[bool, 'FindManyHistoricoArgsFromUsersRecursive4']


class PropinasIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class PropinasArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'PropinasIncludeFromPropinasRecursive1'


class PropinasArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'PropinasIncludeFromPropinasRecursive2'


class PropinasArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'PropinasIncludeFromPropinasRecursive3'


class PropinasArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'PropinasIncludeFromPropinasRecursive4'


class PropinasArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyPropinasArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive1'


class FindManyPropinasArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive2'


class FindManyPropinasArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive3'


class FindManyPropinasArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive4'


class FindManyPropinasArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    
    

class ReconhecimentoIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos: Union[bool, 'AlunosArgsFromUsersRecursive1']


class ReconhecimentoIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos: Union[bool, 'AlunosArgsFromUsersRecursive2']


class ReconhecimentoIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos: Union[bool, 'AlunosArgsFromUsersRecursive3']


class ReconhecimentoIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    Alunos: Union[bool, 'AlunosArgsFromUsersRecursive4']


class ReconhecimentoIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class ReconhecimentoArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive1'


class ReconhecimentoArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive2'


class ReconhecimentoArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive3'


class ReconhecimentoArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive4'


class ReconhecimentoArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyReconhecimentoArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive1'


class FindManyReconhecimentoArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive2'


class FindManyReconhecimentoArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive3'


class FindManyReconhecimentoArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive4'


class FindManyReconhecimentoArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    
    

class SequelizeMetaIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""


class SequelizeMetaIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""


class SequelizeMetaIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""


class SequelizeMetaIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""


class SequelizeMetaIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class SequelizeMetaArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive1'


class SequelizeMetaArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive2'


class SequelizeMetaArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive3'


class SequelizeMetaArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive4'


class SequelizeMetaArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManySequelizeMetaArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive1'


class FindManySequelizeMetaArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive2'


class FindManySequelizeMetaArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive3'


class FindManySequelizeMetaArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive4'


class FindManySequelizeMetaArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    
    

class UsersIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromUsersRecursive1']


class UsersIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromUsersRecursive2']


class UsersIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromUsersRecursive3']


class UsersIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromUsersRecursive4']


class UsersIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class UsersArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyUsersArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class VigilantesIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    Users: Union[bool, 'UsersArgsFromUsersRecursive1']


class VigilantesIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    Users: Union[bool, 'UsersArgsFromUsersRecursive2']


class VigilantesIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    Users: Union[bool, 'UsersArgsFromUsersRecursive3']


class VigilantesIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    Users: Union[bool, 'UsersArgsFromUsersRecursive4']


class VigilantesIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class VigilantesArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'VigilantesIncludeFromVigilantesRecursive1'


class VigilantesArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'VigilantesIncludeFromVigilantesRecursive2'


class VigilantesArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'VigilantesIncludeFromVigilantesRecursive3'


class VigilantesArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'VigilantesIncludeFromVigilantesRecursive4'


class VigilantesArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyVigilantesArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive1'


class FindManyVigilantesArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive2'


class FindManyVigilantesArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive3'


class FindManyVigilantesArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive4'


class FindManyVigilantesArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    


FindManyUsersArgs = FindManyUsersArgsFromUsers
FindFirstUsersArgs = FindManyUsersArgsFromUsers


    

class UsersWhereInput(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nome_completo: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    pin_acesso: Union[None, _str, 'types.StringFilter']
    telefone: Union[None, _str, 'types.StringFilter']
    type: 'enums.enum_Users_type'
    bi: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Vigilantes: 'VigilantesListRelationFilter'

    # should be noted that AND and NOT should be Union['UsersWhereInputRecursive1', List['UsersWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UsersWhereInputRecursive1']
    OR: List['UsersWhereInputRecursive1']
    NOT: List['UsersWhereInputRecursive1']


class UsersWhereInputRecursive1(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nome_completo: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    pin_acesso: Union[None, _str, 'types.StringFilter']
    telefone: Union[None, _str, 'types.StringFilter']
    type: 'enums.enum_Users_type'
    bi: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Vigilantes: 'VigilantesListRelationFilter'

    # should be noted that AND and NOT should be Union['UsersWhereInputRecursive2', List['UsersWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UsersWhereInputRecursive2']
    OR: List['UsersWhereInputRecursive2']
    NOT: List['UsersWhereInputRecursive2']


class UsersWhereInputRecursive2(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nome_completo: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    pin_acesso: Union[None, _str, 'types.StringFilter']
    telefone: Union[None, _str, 'types.StringFilter']
    type: 'enums.enum_Users_type'
    bi: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Vigilantes: 'VigilantesListRelationFilter'

    # should be noted that AND and NOT should be Union['UsersWhereInputRecursive3', List['UsersWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UsersWhereInputRecursive3']
    OR: List['UsersWhereInputRecursive3']
    NOT: List['UsersWhereInputRecursive3']


class UsersWhereInputRecursive3(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nome_completo: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    pin_acesso: Union[None, _str, 'types.StringFilter']
    telefone: Union[None, _str, 'types.StringFilter']
    type: 'enums.enum_Users_type'
    bi: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Vigilantes: 'VigilantesListRelationFilter'

    # should be noted that AND and NOT should be Union['UsersWhereInputRecursive4', List['UsersWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UsersWhereInputRecursive4']
    OR: List['UsersWhereInputRecursive4']
    NOT: List['UsersWhereInputRecursive4']


class UsersWhereInputRecursive4(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nome_completo: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    pin_acesso: Union[None, _str, 'types.StringFilter']
    telefone: Union[None, _str, 'types.StringFilter']
    type: 'enums.enum_Users_type'
    bi: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Vigilantes: 'VigilantesListRelationFilter'



# aggregate Users types


    

class UsersScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nome_completo: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    pin_acesso: Union[_str, 'types.StringWithAggregatesFilter']
    telefone: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.enum_Users_type'
    bi: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UsersScalarWhereWithAggregatesInputRecursive1']
    OR: List['UsersScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UsersScalarWhereWithAggregatesInputRecursive1']


class UsersScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nome_completo: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    pin_acesso: Union[_str, 'types.StringWithAggregatesFilter']
    telefone: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.enum_Users_type'
    bi: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UsersScalarWhereWithAggregatesInputRecursive2']
    OR: List['UsersScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UsersScalarWhereWithAggregatesInputRecursive2']


class UsersScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nome_completo: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    pin_acesso: Union[_str, 'types.StringWithAggregatesFilter']
    telefone: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.enum_Users_type'
    bi: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UsersScalarWhereWithAggregatesInputRecursive3']
    OR: List['UsersScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UsersScalarWhereWithAggregatesInputRecursive3']


class UsersScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nome_completo: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    pin_acesso: Union[_str, 'types.StringWithAggregatesFilter']
    telefone: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.enum_Users_type'
    bi: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UsersScalarWhereWithAggregatesInputRecursive4']
    OR: List['UsersScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UsersScalarWhereWithAggregatesInputRecursive4']


class UsersScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nome_completo: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    pin_acesso: Union[_str, 'types.StringWithAggregatesFilter']
    telefone: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.enum_Users_type'
    bi: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UsersGroupByOutput(TypedDict, total=False):
    id: _int
    nome_completo: _str
    email: _str
    pin_acesso: _str
    telefone: _str
    type: 'enums.enum_Users_type'
    bi: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'UsersSumAggregateOutput'
    _avg: 'UsersAvgAggregateOutput'
    _min: 'UsersMinAggregateOutput'
    _max: 'UsersMaxAggregateOutput'
    _count: 'UsersCountAggregateOutput'


class UsersAvgAggregateOutput(TypedDict, total=False):
    """Users output for aggregating averages"""
    id: float


class UsersSumAggregateOutput(TypedDict, total=False):
    """Users output for aggregating sums"""
    id: _int


class UsersScalarAggregateOutput(TypedDict, total=False):
    """Users output including scalar fields"""
    id: _int
    nome_completo: _str
    email: _str
    pin_acesso: _str
    telefone: _str
    type: 'enums.enum_Users_type'
    bi: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


UsersMinAggregateOutput = UsersScalarAggregateOutput
UsersMaxAggregateOutput = UsersScalarAggregateOutput


class UsersMaxAggregateInput(TypedDict, total=False):
    """Users input for aggregating by max"""
    id: bool
    nome_completo: bool
    email: bool
    pin_acesso: bool
    telefone: bool
    type: bool
    bi: bool
    createdAt: bool
    updatedAt: bool


class UsersMinAggregateInput(TypedDict, total=False):
    """Users input for aggregating by min"""
    id: bool
    nome_completo: bool
    email: bool
    pin_acesso: bool
    telefone: bool
    type: bool
    bi: bool
    createdAt: bool
    updatedAt: bool


class UsersNumberAggregateInput(TypedDict, total=False):
    """Users input for aggregating numbers"""
    id: bool


UsersAvgAggregateInput = UsersNumberAggregateInput
UsersSumAggregateInput = UsersNumberAggregateInput


UsersCountAggregateInput = TypedDict(
    'UsersCountAggregateInput',
    {
        'id': bool,
        'nome_completo': bool,
        'email': bool,
        'pin_acesso': bool,
        'telefone': bool,
        'type': bool,
        'bi': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

UsersCountAggregateOutput = TypedDict(
    'UsersCountAggregateOutput',
    {
        'id': int,
        'nome_completo': int,
        'email': int,
        'pin_acesso': int,
        'telefone': int,
        'type': int,
        'bi': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


UsersKeys = Literal[
    'id',
    'nome_completo',
    'email',
    'pin_acesso',
    'telefone',
    'type',
    'bi',
    'createdAt',
    'updatedAt',
    'Vigilantes',
]
UsersScalarFieldKeys = Literal[
    'id',
    'nome_completo',
    'email',
    'pin_acesso',
    'telefone',
    'type',
    'bi',
    'createdAt',
    'updatedAt',
]
UsersScalarFieldKeysT = TypeVar('UsersScalarFieldKeysT', bound=UsersScalarFieldKeys)

UsersRelationalFieldKeys = Literal[
        'Vigilantes',
    ]

# Vigilantes types

class VigilantesOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Vigilantes create method"""
    id: _int
    descricao: Optional[_str]
    UserId: Optional[_int]
    Users: 'UsersCreateNestedWithoutRelationsInput'


class VigilantesCreateInput(VigilantesOptionalCreateInput):
    """Required arguments to the Vigilantes create method"""
    turno: 'enums.enum_Vigilantes_turno'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class VigilantesOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Vigilantes create method, without relations"""
    id: _int
    descricao: Optional[_str]
    UserId: Optional[_int]


class VigilantesCreateWithoutRelationsInput(VigilantesOptionalCreateWithoutRelationsInput):
    """Required arguments to the Vigilantes create method, without relations"""
    turno: 'enums.enum_Vigilantes_turno'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime

class VigilantesConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'VigilantesCreateWithoutRelationsInput'
    where: 'VigilantesWhereUniqueInput'

class VigilantesCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'VigilantesCreateWithoutRelationsInput'
    connect: 'VigilantesWhereUniqueInput'
    connect_or_create: 'VigilantesConnectOrCreateWithoutRelationsInput'


class VigilantesCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['VigilantesCreateWithoutRelationsInput', List['VigilantesCreateWithoutRelationsInput']]
    connect: Union['VigilantesWhereUniqueInput', List['VigilantesWhereUniqueInput']]
    connect_or_create: Union['VigilantesConnectOrCreateWithoutRelationsInput', List['VigilantesConnectOrCreateWithoutRelationsInput']]

_VigilantesWhereUnique_id_Input = TypedDict(
    '_VigilantesWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

VigilantesWhereUniqueInput = _VigilantesWhereUnique_id_Input


class VigilantesUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    turno: 'enums.enum_Vigilantes_turno'
    descricao: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    Users: 'UsersUpdateOneWithoutRelationsInput'


class VigilantesUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    turno: 'enums.enum_Vigilantes_turno'
    descricao: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class VigilantesUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['VigilantesCreateWithoutRelationsInput']
    connect: List['VigilantesWhereUniqueInput']
    connect_or_create: List['VigilantesConnectOrCreateWithoutRelationsInput']
    set: List['VigilantesWhereUniqueInput']
    disconnect: List['VigilantesWhereUniqueInput']
    delete: List['VigilantesWhereUniqueInput']

    # TODO
    # update: List['VigilantesUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['VigilantesUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['VigilantesScalarWhereInput']
    # upsert: List['VigilantesUpserteWithWhereUniqueWithoutRelationsInput']


class VigilantesUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'VigilantesCreateWithoutRelationsInput'
    connect: 'VigilantesWhereUniqueInput'
    connect_or_create: 'VigilantesConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'VigilantesUpdateInput'
    # upsert: 'VigilantesUpsertWithoutRelationsInput'


class VigilantesUpsertInput(TypedDict):
    create: 'VigilantesCreateInput'
    update: 'VigilantesUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Vigilantes_id_OrderByInput = TypedDict(
    '_Vigilantes_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Vigilantes_turno_OrderByInput = TypedDict(
    '_Vigilantes_turno_OrderByInput',
    {
        'turno': 'SortOrder',
    },
    total=True
)

_Vigilantes_descricao_OrderByInput = TypedDict(
    '_Vigilantes_descricao_OrderByInput',
    {
        'descricao': 'SortOrder',
    },
    total=True
)

_Vigilantes_UserId_OrderByInput = TypedDict(
    '_Vigilantes_UserId_OrderByInput',
    {
        'UserId': 'SortOrder',
    },
    total=True
)

_Vigilantes_createdAt_OrderByInput = TypedDict(
    '_Vigilantes_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Vigilantes_updatedAt_OrderByInput = TypedDict(
    '_Vigilantes_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Vigilantes_RelevanceInner = TypedDict(
    '_Vigilantes_RelevanceInner',
    {
        'fields': 'List[VigilantesScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Vigilantes_RelevanceOrderByInput = TypedDict(
    '_Vigilantes_RelevanceOrderByInput',
    {
        '_relevance': '_Vigilantes_RelevanceInner',
    },
    total=True
)

VigilantesOrderByInput = Union[
    '_Vigilantes_id_OrderByInput',
    '_Vigilantes_turno_OrderByInput',
    '_Vigilantes_descricao_OrderByInput',
    '_Vigilantes_UserId_OrderByInput',
    '_Vigilantes_createdAt_OrderByInput',
    '_Vigilantes_updatedAt_OrderByInput',
    '_Vigilantes_RelevanceOrderByInput',
]



# recursive Vigilantes types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

VigilantesRelationFilter = TypedDict(
    'VigilantesRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class VigilantesListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class VigilantesInclude(TypedDict, total=False):
    """Vigilantes relational arguments"""
    Users: Union[bool, 'UsersArgsFromVigilantes']


    

class AlunosIncludeFromVigilantes(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromVigilantesRecursive1']
    Fotos: Union[bool, 'FindManyFotosArgsFromVigilantesRecursive1']
    Historico: Union[bool, 'FindManyHistoricoArgsFromVigilantesRecursive1']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromVigilantesRecursive1']


class AlunosIncludeFromVigilantesRecursive1(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromVigilantesRecursive2']
    Fotos: Union[bool, 'FindManyFotosArgsFromVigilantesRecursive2']
    Historico: Union[bool, 'FindManyHistoricoArgsFromVigilantesRecursive2']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromVigilantesRecursive2']


class AlunosIncludeFromVigilantesRecursive2(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromVigilantesRecursive3']
    Fotos: Union[bool, 'FindManyFotosArgsFromVigilantesRecursive3']
    Historico: Union[bool, 'FindManyHistoricoArgsFromVigilantesRecursive3']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromVigilantesRecursive3']


class AlunosIncludeFromVigilantesRecursive3(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromVigilantesRecursive4']
    Fotos: Union[bool, 'FindManyFotosArgsFromVigilantesRecursive4']
    Historico: Union[bool, 'FindManyHistoricoArgsFromVigilantesRecursive4']
    Reconhecimento: Union[bool, 'FindManyReconhecimentoArgsFromVigilantesRecursive4']


class AlunosIncludeFromVigilantesRecursive4(TypedDict, total=False):
    """Relational arguments for Vigilantes"""

    

class AlunosArgsFromVigilantes(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'AlunosIncludeFromAlunosRecursive1'


class AlunosArgsFromVigilantesRecursive1(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'AlunosIncludeFromAlunosRecursive2'


class AlunosArgsFromVigilantesRecursive2(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'AlunosIncludeFromAlunosRecursive3'


class AlunosArgsFromVigilantesRecursive3(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'AlunosIncludeFromAlunosRecursive4'


class AlunosArgsFromVigilantesRecursive4(TypedDict, total=False):
    """Arguments for Vigilantes"""
    
    

class FindManyAlunosArgsFromVigilantes(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive1'


class FindManyAlunosArgsFromVigilantesRecursive1(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive2'


class FindManyAlunosArgsFromVigilantesRecursive2(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive3'


class FindManyAlunosArgsFromVigilantesRecursive3(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    include: 'AlunosIncludeFromAlunosRecursive4'


class FindManyAlunosArgsFromVigilantesRecursive4(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['AlunosOrderByInput', List['AlunosOrderByInput']]
    where: 'AlunosWhereInput'
    cursor: 'AlunosWhereUniqueInput'
    distinct: List['AlunosScalarFieldKeys']
    
    

class Alunos_propinaIncludeFromVigilantes(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos: Union[bool, 'AlunosArgsFromVigilantesRecursive1']
    Propinas: Union[bool, 'PropinasArgsFromVigilantesRecursive1']


class Alunos_propinaIncludeFromVigilantesRecursive1(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos: Union[bool, 'AlunosArgsFromVigilantesRecursive2']
    Propinas: Union[bool, 'PropinasArgsFromVigilantesRecursive2']


class Alunos_propinaIncludeFromVigilantesRecursive2(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos: Union[bool, 'AlunosArgsFromVigilantesRecursive3']
    Propinas: Union[bool, 'PropinasArgsFromVigilantesRecursive3']


class Alunos_propinaIncludeFromVigilantesRecursive3(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos: Union[bool, 'AlunosArgsFromVigilantesRecursive4']
    Propinas: Union[bool, 'PropinasArgsFromVigilantesRecursive4']


class Alunos_propinaIncludeFromVigilantesRecursive4(TypedDict, total=False):
    """Relational arguments for Vigilantes"""

    

class Alunos_propinaArgsFromVigilantes(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive1'


class Alunos_propinaArgsFromVigilantesRecursive1(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive2'


class Alunos_propinaArgsFromVigilantesRecursive2(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive3'


class Alunos_propinaArgsFromVigilantesRecursive3(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive4'


class Alunos_propinaArgsFromVigilantesRecursive4(TypedDict, total=False):
    """Arguments for Vigilantes"""
    
    

class FindManyAlunos_propinaArgsFromVigilantes(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive1'


class FindManyAlunos_propinaArgsFromVigilantesRecursive1(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive2'


class FindManyAlunos_propinaArgsFromVigilantesRecursive2(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive3'


class FindManyAlunos_propinaArgsFromVigilantesRecursive3(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    include: 'Alunos_propinaIncludeFromAlunos_propinaRecursive4'


class FindManyAlunos_propinaArgsFromVigilantesRecursive4(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['Alunos_propinaOrderByInput', List['Alunos_propinaOrderByInput']]
    where: 'Alunos_propinaWhereInput'
    cursor: 'Alunos_propinaWhereUniqueInput'
    distinct: List['Alunos_propinaScalarFieldKeys']
    
    

class FotosIncludeFromVigilantes(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos: Union[bool, 'AlunosArgsFromVigilantesRecursive1']


class FotosIncludeFromVigilantesRecursive1(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos: Union[bool, 'AlunosArgsFromVigilantesRecursive2']


class FotosIncludeFromVigilantesRecursive2(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos: Union[bool, 'AlunosArgsFromVigilantesRecursive3']


class FotosIncludeFromVigilantesRecursive3(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos: Union[bool, 'AlunosArgsFromVigilantesRecursive4']


class FotosIncludeFromVigilantesRecursive4(TypedDict, total=False):
    """Relational arguments for Vigilantes"""

    

class FotosArgsFromVigilantes(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'FotosIncludeFromFotosRecursive1'


class FotosArgsFromVigilantesRecursive1(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'FotosIncludeFromFotosRecursive2'


class FotosArgsFromVigilantesRecursive2(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'FotosIncludeFromFotosRecursive3'


class FotosArgsFromVigilantesRecursive3(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'FotosIncludeFromFotosRecursive4'


class FotosArgsFromVigilantesRecursive4(TypedDict, total=False):
    """Arguments for Vigilantes"""
    
    

class FindManyFotosArgsFromVigilantes(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive1'


class FindManyFotosArgsFromVigilantesRecursive1(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive2'


class FindManyFotosArgsFromVigilantesRecursive2(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive3'


class FindManyFotosArgsFromVigilantesRecursive3(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    include: 'FotosIncludeFromFotosRecursive4'


class FindManyFotosArgsFromVigilantesRecursive4(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['FotosOrderByInput', List['FotosOrderByInput']]
    where: 'FotosWhereInput'
    cursor: 'FotosWhereUniqueInput'
    distinct: List['FotosScalarFieldKeys']
    
    

class HistoricoIncludeFromVigilantes(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos: Union[bool, 'AlunosArgsFromVigilantesRecursive1']
    Propinas: Union[bool, 'PropinasArgsFromVigilantesRecursive1']


class HistoricoIncludeFromVigilantesRecursive1(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos: Union[bool, 'AlunosArgsFromVigilantesRecursive2']
    Propinas: Union[bool, 'PropinasArgsFromVigilantesRecursive2']


class HistoricoIncludeFromVigilantesRecursive2(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos: Union[bool, 'AlunosArgsFromVigilantesRecursive3']
    Propinas: Union[bool, 'PropinasArgsFromVigilantesRecursive3']


class HistoricoIncludeFromVigilantesRecursive3(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos: Union[bool, 'AlunosArgsFromVigilantesRecursive4']
    Propinas: Union[bool, 'PropinasArgsFromVigilantesRecursive4']


class HistoricoIncludeFromVigilantesRecursive4(TypedDict, total=False):
    """Relational arguments for Vigilantes"""

    

class HistoricoArgsFromVigilantes(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'HistoricoIncludeFromHistoricoRecursive1'


class HistoricoArgsFromVigilantesRecursive1(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'HistoricoIncludeFromHistoricoRecursive2'


class HistoricoArgsFromVigilantesRecursive2(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'HistoricoIncludeFromHistoricoRecursive3'


class HistoricoArgsFromVigilantesRecursive3(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'HistoricoIncludeFromHistoricoRecursive4'


class HistoricoArgsFromVigilantesRecursive4(TypedDict, total=False):
    """Arguments for Vigilantes"""
    
    

class FindManyHistoricoArgsFromVigilantes(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive1'


class FindManyHistoricoArgsFromVigilantesRecursive1(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive2'


class FindManyHistoricoArgsFromVigilantesRecursive2(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive3'


class FindManyHistoricoArgsFromVigilantesRecursive3(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    include: 'HistoricoIncludeFromHistoricoRecursive4'


class FindManyHistoricoArgsFromVigilantesRecursive4(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['HistoricoOrderByInput', List['HistoricoOrderByInput']]
    where: 'HistoricoWhereInput'
    cursor: 'HistoricoWhereUniqueInput'
    distinct: List['HistoricoScalarFieldKeys']
    
    

class PropinasIncludeFromVigilantes(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromVigilantesRecursive1']
    Historico: Union[bool, 'FindManyHistoricoArgsFromVigilantesRecursive1']


class PropinasIncludeFromVigilantesRecursive1(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromVigilantesRecursive2']
    Historico: Union[bool, 'FindManyHistoricoArgsFromVigilantesRecursive2']


class PropinasIncludeFromVigilantesRecursive2(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromVigilantesRecursive3']
    Historico: Union[bool, 'FindManyHistoricoArgsFromVigilantesRecursive3']


class PropinasIncludeFromVigilantesRecursive3(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos_propina: Union[bool, 'FindManyAlunos_propinaArgsFromVigilantesRecursive4']
    Historico: Union[bool, 'FindManyHistoricoArgsFromVigilantesRecursive4']


class PropinasIncludeFromVigilantesRecursive4(TypedDict, total=False):
    """Relational arguments for Vigilantes"""

    

class PropinasArgsFromVigilantes(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'PropinasIncludeFromPropinasRecursive1'


class PropinasArgsFromVigilantesRecursive1(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'PropinasIncludeFromPropinasRecursive2'


class PropinasArgsFromVigilantesRecursive2(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'PropinasIncludeFromPropinasRecursive3'


class PropinasArgsFromVigilantesRecursive3(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'PropinasIncludeFromPropinasRecursive4'


class PropinasArgsFromVigilantesRecursive4(TypedDict, total=False):
    """Arguments for Vigilantes"""
    
    

class FindManyPropinasArgsFromVigilantes(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive1'


class FindManyPropinasArgsFromVigilantesRecursive1(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive2'


class FindManyPropinasArgsFromVigilantesRecursive2(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive3'


class FindManyPropinasArgsFromVigilantesRecursive3(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    include: 'PropinasIncludeFromPropinasRecursive4'


class FindManyPropinasArgsFromVigilantesRecursive4(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['PropinasOrderByInput', List['PropinasOrderByInput']]
    where: 'PropinasWhereInput'
    cursor: 'PropinasWhereUniqueInput'
    distinct: List['PropinasScalarFieldKeys']
    
    

class ReconhecimentoIncludeFromVigilantes(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos: Union[bool, 'AlunosArgsFromVigilantesRecursive1']


class ReconhecimentoIncludeFromVigilantesRecursive1(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos: Union[bool, 'AlunosArgsFromVigilantesRecursive2']


class ReconhecimentoIncludeFromVigilantesRecursive2(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos: Union[bool, 'AlunosArgsFromVigilantesRecursive3']


class ReconhecimentoIncludeFromVigilantesRecursive3(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Alunos: Union[bool, 'AlunosArgsFromVigilantesRecursive4']


class ReconhecimentoIncludeFromVigilantesRecursive4(TypedDict, total=False):
    """Relational arguments for Vigilantes"""

    

class ReconhecimentoArgsFromVigilantes(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive1'


class ReconhecimentoArgsFromVigilantesRecursive1(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive2'


class ReconhecimentoArgsFromVigilantesRecursive2(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive3'


class ReconhecimentoArgsFromVigilantesRecursive3(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive4'


class ReconhecimentoArgsFromVigilantesRecursive4(TypedDict, total=False):
    """Arguments for Vigilantes"""
    
    

class FindManyReconhecimentoArgsFromVigilantes(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive1'


class FindManyReconhecimentoArgsFromVigilantesRecursive1(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive2'


class FindManyReconhecimentoArgsFromVigilantesRecursive2(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive3'


class FindManyReconhecimentoArgsFromVigilantesRecursive3(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    include: 'ReconhecimentoIncludeFromReconhecimentoRecursive4'


class FindManyReconhecimentoArgsFromVigilantesRecursive4(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['ReconhecimentoOrderByInput', List['ReconhecimentoOrderByInput']]
    where: 'ReconhecimentoWhereInput'
    cursor: 'ReconhecimentoWhereUniqueInput'
    distinct: List['ReconhecimentoScalarFieldKeys']
    
    

class SequelizeMetaIncludeFromVigilantes(TypedDict, total=False):
    """Relational arguments for Vigilantes"""


class SequelizeMetaIncludeFromVigilantesRecursive1(TypedDict, total=False):
    """Relational arguments for Vigilantes"""


class SequelizeMetaIncludeFromVigilantesRecursive2(TypedDict, total=False):
    """Relational arguments for Vigilantes"""


class SequelizeMetaIncludeFromVigilantesRecursive3(TypedDict, total=False):
    """Relational arguments for Vigilantes"""


class SequelizeMetaIncludeFromVigilantesRecursive4(TypedDict, total=False):
    """Relational arguments for Vigilantes"""

    

class SequelizeMetaArgsFromVigilantes(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive1'


class SequelizeMetaArgsFromVigilantesRecursive1(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive2'


class SequelizeMetaArgsFromVigilantesRecursive2(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive3'


class SequelizeMetaArgsFromVigilantesRecursive3(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive4'


class SequelizeMetaArgsFromVigilantesRecursive4(TypedDict, total=False):
    """Arguments for Vigilantes"""
    
    

class FindManySequelizeMetaArgsFromVigilantes(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive1'


class FindManySequelizeMetaArgsFromVigilantesRecursive1(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive2'


class FindManySequelizeMetaArgsFromVigilantesRecursive2(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive3'


class FindManySequelizeMetaArgsFromVigilantesRecursive3(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    include: 'SequelizeMetaIncludeFromSequelizeMetaRecursive4'


class FindManySequelizeMetaArgsFromVigilantesRecursive4(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['SequelizeMetaOrderByInput', List['SequelizeMetaOrderByInput']]
    where: 'SequelizeMetaWhereInput'
    cursor: 'SequelizeMetaWhereUniqueInput'
    distinct: List['SequelizeMetaScalarFieldKeys']
    
    

class UsersIncludeFromVigilantes(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromVigilantesRecursive1']


class UsersIncludeFromVigilantesRecursive1(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromVigilantesRecursive2']


class UsersIncludeFromVigilantesRecursive2(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromVigilantesRecursive3']


class UsersIncludeFromVigilantesRecursive3(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Vigilantes: Union[bool, 'FindManyVigilantesArgsFromVigilantesRecursive4']


class UsersIncludeFromVigilantesRecursive4(TypedDict, total=False):
    """Relational arguments for Vigilantes"""

    

class UsersArgsFromVigilantes(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromVigilantesRecursive1(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromVigilantesRecursive2(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromVigilantesRecursive3(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromVigilantesRecursive4(TypedDict, total=False):
    """Arguments for Vigilantes"""
    
    

class FindManyUsersArgsFromVigilantes(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromVigilantesRecursive1(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromVigilantesRecursive2(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromVigilantesRecursive3(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromVigilantesRecursive4(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class VigilantesIncludeFromVigilantes(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Users: Union[bool, 'UsersArgsFromVigilantesRecursive1']


class VigilantesIncludeFromVigilantesRecursive1(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Users: Union[bool, 'UsersArgsFromVigilantesRecursive2']


class VigilantesIncludeFromVigilantesRecursive2(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Users: Union[bool, 'UsersArgsFromVigilantesRecursive3']


class VigilantesIncludeFromVigilantesRecursive3(TypedDict, total=False):
    """Relational arguments for Vigilantes"""
    Users: Union[bool, 'UsersArgsFromVigilantesRecursive4']


class VigilantesIncludeFromVigilantesRecursive4(TypedDict, total=False):
    """Relational arguments for Vigilantes"""

    

class VigilantesArgsFromVigilantes(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'VigilantesIncludeFromVigilantesRecursive1'


class VigilantesArgsFromVigilantesRecursive1(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'VigilantesIncludeFromVigilantesRecursive2'


class VigilantesArgsFromVigilantesRecursive2(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'VigilantesIncludeFromVigilantesRecursive3'


class VigilantesArgsFromVigilantesRecursive3(TypedDict, total=False):
    """Arguments for Vigilantes"""
    include: 'VigilantesIncludeFromVigilantesRecursive4'


class VigilantesArgsFromVigilantesRecursive4(TypedDict, total=False):
    """Arguments for Vigilantes"""
    
    

class FindManyVigilantesArgsFromVigilantes(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive1'


class FindManyVigilantesArgsFromVigilantesRecursive1(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive2'


class FindManyVigilantesArgsFromVigilantesRecursive2(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive3'


class FindManyVigilantesArgsFromVigilantesRecursive3(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    include: 'VigilantesIncludeFromVigilantesRecursive4'


class FindManyVigilantesArgsFromVigilantesRecursive4(TypedDict, total=False):
    """Arguments for Vigilantes"""
    take: int
    skip: int
    order_by: Union['VigilantesOrderByInput', List['VigilantesOrderByInput']]
    where: 'VigilantesWhereInput'
    cursor: 'VigilantesWhereUniqueInput'
    distinct: List['VigilantesScalarFieldKeys']
    


FindManyVigilantesArgs = FindManyVigilantesArgsFromVigilantes
FindFirstVigilantesArgs = FindManyVigilantesArgsFromVigilantes


    

class VigilantesWhereInput(TypedDict, total=False):
    """Vigilantes arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    turno: 'enums.enum_Vigilantes_turno'
    descricao: Union[None, _str, 'types.StringFilter']
    UserId: Union[None, _int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Users: 'UsersRelationFilter'

    # should be noted that AND and NOT should be Union['VigilantesWhereInputRecursive1', List['VigilantesWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['VigilantesWhereInputRecursive1']
    OR: List['VigilantesWhereInputRecursive1']
    NOT: List['VigilantesWhereInputRecursive1']


class VigilantesWhereInputRecursive1(TypedDict, total=False):
    """Vigilantes arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    turno: 'enums.enum_Vigilantes_turno'
    descricao: Union[None, _str, 'types.StringFilter']
    UserId: Union[None, _int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Users: 'UsersRelationFilter'

    # should be noted that AND and NOT should be Union['VigilantesWhereInputRecursive2', List['VigilantesWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['VigilantesWhereInputRecursive2']
    OR: List['VigilantesWhereInputRecursive2']
    NOT: List['VigilantesWhereInputRecursive2']


class VigilantesWhereInputRecursive2(TypedDict, total=False):
    """Vigilantes arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    turno: 'enums.enum_Vigilantes_turno'
    descricao: Union[None, _str, 'types.StringFilter']
    UserId: Union[None, _int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Users: 'UsersRelationFilter'

    # should be noted that AND and NOT should be Union['VigilantesWhereInputRecursive3', List['VigilantesWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['VigilantesWhereInputRecursive3']
    OR: List['VigilantesWhereInputRecursive3']
    NOT: List['VigilantesWhereInputRecursive3']


class VigilantesWhereInputRecursive3(TypedDict, total=False):
    """Vigilantes arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    turno: 'enums.enum_Vigilantes_turno'
    descricao: Union[None, _str, 'types.StringFilter']
    UserId: Union[None, _int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Users: 'UsersRelationFilter'

    # should be noted that AND and NOT should be Union['VigilantesWhereInputRecursive4', List['VigilantesWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['VigilantesWhereInputRecursive4']
    OR: List['VigilantesWhereInputRecursive4']
    NOT: List['VigilantesWhereInputRecursive4']


class VigilantesWhereInputRecursive4(TypedDict, total=False):
    """Vigilantes arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    turno: 'enums.enum_Vigilantes_turno'
    descricao: Union[None, _str, 'types.StringFilter']
    UserId: Union[None, _int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Users: 'UsersRelationFilter'



# aggregate Vigilantes types


    

class VigilantesScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Vigilantes arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    turno: 'enums.enum_Vigilantes_turno'
    descricao: Union[_str, 'types.StringWithAggregatesFilter']
    UserId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VigilantesScalarWhereWithAggregatesInputRecursive1']
    OR: List['VigilantesScalarWhereWithAggregatesInputRecursive1']
    NOT: List['VigilantesScalarWhereWithAggregatesInputRecursive1']


class VigilantesScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Vigilantes arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    turno: 'enums.enum_Vigilantes_turno'
    descricao: Union[_str, 'types.StringWithAggregatesFilter']
    UserId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VigilantesScalarWhereWithAggregatesInputRecursive2']
    OR: List['VigilantesScalarWhereWithAggregatesInputRecursive2']
    NOT: List['VigilantesScalarWhereWithAggregatesInputRecursive2']


class VigilantesScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Vigilantes arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    turno: 'enums.enum_Vigilantes_turno'
    descricao: Union[_str, 'types.StringWithAggregatesFilter']
    UserId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VigilantesScalarWhereWithAggregatesInputRecursive3']
    OR: List['VigilantesScalarWhereWithAggregatesInputRecursive3']
    NOT: List['VigilantesScalarWhereWithAggregatesInputRecursive3']


class VigilantesScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Vigilantes arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    turno: 'enums.enum_Vigilantes_turno'
    descricao: Union[_str, 'types.StringWithAggregatesFilter']
    UserId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VigilantesScalarWhereWithAggregatesInputRecursive4']
    OR: List['VigilantesScalarWhereWithAggregatesInputRecursive4']
    NOT: List['VigilantesScalarWhereWithAggregatesInputRecursive4']


class VigilantesScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Vigilantes arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    turno: 'enums.enum_Vigilantes_turno'
    descricao: Union[_str, 'types.StringWithAggregatesFilter']
    UserId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class VigilantesGroupByOutput(TypedDict, total=False):
    id: _int
    turno: 'enums.enum_Vigilantes_turno'
    descricao: _str
    UserId: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'VigilantesSumAggregateOutput'
    _avg: 'VigilantesAvgAggregateOutput'
    _min: 'VigilantesMinAggregateOutput'
    _max: 'VigilantesMaxAggregateOutput'
    _count: 'VigilantesCountAggregateOutput'


class VigilantesAvgAggregateOutput(TypedDict, total=False):
    """Vigilantes output for aggregating averages"""
    id: float
    UserId: float


class VigilantesSumAggregateOutput(TypedDict, total=False):
    """Vigilantes output for aggregating sums"""
    id: _int
    UserId: _int


class VigilantesScalarAggregateOutput(TypedDict, total=False):
    """Vigilantes output including scalar fields"""
    id: _int
    turno: 'enums.enum_Vigilantes_turno'
    descricao: _str
    UserId: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


VigilantesMinAggregateOutput = VigilantesScalarAggregateOutput
VigilantesMaxAggregateOutput = VigilantesScalarAggregateOutput


class VigilantesMaxAggregateInput(TypedDict, total=False):
    """Vigilantes input for aggregating by max"""
    id: bool
    turno: bool
    descricao: bool
    UserId: bool
    createdAt: bool
    updatedAt: bool


class VigilantesMinAggregateInput(TypedDict, total=False):
    """Vigilantes input for aggregating by min"""
    id: bool
    turno: bool
    descricao: bool
    UserId: bool
    createdAt: bool
    updatedAt: bool


class VigilantesNumberAggregateInput(TypedDict, total=False):
    """Vigilantes input for aggregating numbers"""
    id: bool
    UserId: bool


VigilantesAvgAggregateInput = VigilantesNumberAggregateInput
VigilantesSumAggregateInput = VigilantesNumberAggregateInput


VigilantesCountAggregateInput = TypedDict(
    'VigilantesCountAggregateInput',
    {
        'id': bool,
        'turno': bool,
        'descricao': bool,
        'UserId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

VigilantesCountAggregateOutput = TypedDict(
    'VigilantesCountAggregateOutput',
    {
        'id': int,
        'turno': int,
        'descricao': int,
        'UserId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


VigilantesKeys = Literal[
    'id',
    'turno',
    'descricao',
    'UserId',
    'createdAt',
    'updatedAt',
    'Users',
]
VigilantesScalarFieldKeys = Literal[
    'id',
    'turno',
    'descricao',
    'UserId',
    'createdAt',
    'updatedAt',
]
VigilantesScalarFieldKeysT = TypeVar('VigilantesScalarFieldKeysT', bound=VigilantesScalarFieldKeys)

VigilantesRelationalFieldKeys = Literal[
        'Users',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields